-- Converted using Mokiros's Model to Script Version 3
-- Converted string size: 6480 characters
local function DecodeUnion(Values,Flags,Parse,data)
	local m = Instance.new("Folder")
	m.Name = "UnionCache ["..tostring(math.random(1,9999)).."]"
	m.Archivable = false
	m.Parent = game:GetService("ServerStorage")
	local Union,Subtract = {},{}
	if not data then
		data = Parse('B')
	end
	local ByteLength = (data % 4) + 1
	local Length = Parse('I'..ByteLength)
	local ValueFMT = ('I'..Flags[1])
	for i = 1,Length do
		local data = Parse('B')
		local part
		local isNegate = bit32.band(data,0b10000000) > 0
		local isUnion =  bit32.band(data,0b01000000) > 0
		if isUnion then
			part = DecodeUnion(Values,Flags,Parse,data)
		else
			local isMesh = data % 2 == 1
			local ClassName = Values[Parse(ValueFMT)]
			part = Instance.new(ClassName)
			part.Size = Values[Parse(ValueFMT)]
			part.Position = Values[Parse(ValueFMT)]
			part.Orientation = Values[Parse(ValueFMT)]
			if isMesh then
				local mesh = Instance.new("SpecialMesh")
				mesh.MeshType = Values[Parse(ValueFMT)]
				mesh.Scale = Values[Parse(ValueFMT)]
				mesh.Offset = Values[Parse(ValueFMT)]
				mesh.Parent = part
			end
		end
		part.Parent = m
		table.insert(isNegate and Subtract or Union,part)
	end
	local first = table.remove(Union,1)
	if #Union>0 then
		first = first:UnionAsync(Union)
	end
	if #Subtract>0 then
		first = first:SubtractAsync(Subtract)
	end
	m:Destroy()
	return first
end

local function Decode(str)
	local StringLength = #str
	
	-- Base64 decoding
	do
		local decoder = {}
		for b64code, char in pairs(('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='):split('')) do
			decoder[char:byte()] = b64code-1
		end
		local n = StringLength
		local t,k = table.create(math.floor(n/4)+1),1
		local padding = str:sub(-2) == '==' and 2 or str:sub(-1) == '=' and 1 or 0
		for i = 1, padding > 0 and n-4 or n, 4 do
			local a, b, c, d = str:byte(i,i+3)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000 + decoder[c]*0x40 + decoder[d]
			t[k] = string.char(bit32.extract(v,16,8),bit32.extract(v,8,8),bit32.extract(v,0,8))
			k = k + 1
		end
		if padding == 1 then
			local a, b, c = str:byte(n-3,n-1)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000 + decoder[c]*0x40
			t[k] = string.char(bit32.extract(v,16,8),bit32.extract(v,8,8))
		elseif padding == 2 then
			local a, b = str:byte(n-3,n-2)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000
			t[k] = string.char(bit32.extract(v,16,8))
		end
		str = table.concat(t)
	end
	
	local Position = 1
	local function Parse(fmt)
		local Values = {string.unpack(fmt,str,Position)}
		Position = table.remove(Values)
		return table.unpack(Values)
	end
	
	local Settings = Parse('B')
	local Flags = Parse('B')
	Flags = {
		--[[ValueIndexByteLength]] bit32.extract(Flags,6,2)+1,
		--[[InstanceIndexByteLength]] bit32.extract(Flags,4,2)+1,
		--[[ConnectionsIndexByteLength]] bit32.extract(Flags,2,2)+1,
		--[[MaxPropertiesLengthByteLength]] bit32.extract(Flags,0,2)+1,
		--[[Use Double instead of Float]] bit32.band(Settings,0b1) > 0
	}
	
	local ValueFMT = ('I'..Flags[1])
	local InstanceFMT = ('I'..Flags[2])
	local ConnectionFMT = ('I'..Flags[3])
	local PropertyLengthFMT = ('I'..Flags[4])
	
	local ValuesLength = Parse(ValueFMT)
	local Values = table.create(ValuesLength)
	local CFrameIndexes = {}
	
	local ValueDecoders = {
		--!!Start
		[1] = function(Modifier)
			return Parse('s'..Modifier)
		end,
		--!!Split
		[2] = function(Modifier)
			return Modifier ~= 0
		end,
		--!!Split
		[3] = function()
			return Parse('d')
		end,
		--!!Split
		[4] = function(_,Index)
			table.insert(CFrameIndexes,{Index,Parse(('I'..Flags[1]):rep(3))})
		end,
		--!!Split
		[5] = {CFrame.new,Flags[5] and 'dddddddddddd' or 'ffffffffffff'},
		--!!Split
		[6] = {Color3.fromRGB,'BBB'},
		--!!Split
		[7] = {BrickColor.new,'I2'},
		--!!Split
		[8] = function(Modifier)
			local len = Parse('I'..Modifier)
			local kpts = table.create(len)
			for i = 1,len do
				kpts[i] = ColorSequenceKeypoint.new(Parse('f'),Color3.fromRGB(Parse('BBB')))
			end
			return ColorSequence.new(kpts)
		end,
		--!!Split
		[9] = function(Modifier)
			local len = Parse('I'..Modifier)
			local kpts = table.create(len)
			for i = 1,len do
				kpts[i] = NumberSequenceKeypoint.new(Parse(Flags[5] and 'ddd' or 'fff'))
			end
			return NumberSequence.new(kpts)
		end,
		--!!Split
		[10] = {Vector3.new,Flags[5] and 'ddd' or 'fff'},
		--!!Split
		[11] = {Vector2.new,Flags[5] and 'dd' or 'ff'},
		--!!Split
		[12] = {UDim2.new,Flags[5] and 'di2di2' or 'fi2fi2'},
		--!!Split
		[13] = {Rect.new,Flags[5] and 'dddd' or 'ffff'},
		--!!Split
		[14] = function()
			local flags = Parse('B')
			local ids = {"Top","Bottom","Left","Right","Front","Back"}
			local t = {}
			for i = 0,5 do
				if bit32.extract(flags,i,1)==1 then
					table.insert(t,Enum.NormalId[ids[i+1]])
				end
			end
			return Axes.new(unpack(t))
		end,
		--!!Split
		[15] = function()
			local flags = Parse('B')
			local ids = {"Top","Bottom","Left","Right","Front","Back"}
			local t = {}
			for i = 0,5 do
				if bit32.extract(flags,i,1)==1 then
					table.insert(t,Enum.NormalId[ids[i+1]])
				end
			end
			return Faces.new(unpack(t))
		end,
		--!!Split
		[16] = {PhysicalProperties.new,Flags[5] and 'ddddd' or 'fffff'},
		--!!Split
		[17] = {NumberRange.new,Flags[5] and 'dd' or 'ff'},
		--!!Split
		[18] = {UDim.new,Flags[5] and 'di2' or 'fi2'},
		--!!Split
		[19] = function()
			return Ray.new(Vector3.new(Parse(Flags[5] and 'ddd' or 'fff')),Vector3.new(Parse(Flags[5] and 'ddd' or 'fff')))
		end
		--!!End
	}
	
	for i = 1,ValuesLength do
		local TypeAndModifier = Parse('B')
		local Type = bit32.band(TypeAndModifier,0b11111)
		local Modifier = (TypeAndModifier - Type) / 0b100000
		local Decoder = ValueDecoders[Type]
		if type(Decoder)=='function' then
			Values[i] = Decoder(Modifier,i)
		else
			Values[i] = Decoder[1](Parse(Decoder[2]))
		end
	end
	
	for i,t in pairs(CFrameIndexes) do
		Values[t[1]] = CFrame.fromMatrix(Values[t[2]],Values[t[3]],Values[t[4]])
	end
	
	local InstancesLength = Parse(InstanceFMT)
	local Instances = {}
	local NoParent = {}
	
	for i = 1,InstancesLength do
		local ClassName = Values[Parse(ValueFMT)]
		local obj
		local MeshPartMesh,MeshPartScale
		if ClassName == "UnionOperation" then
			obj = DecodeUnion(Values,Flags,Parse)
			obj.UsePartColor = true
		elseif ClassName:find("Script") then
			obj = Instance.new("Folder")
			Script(obj,ClassName=='ModuleScript')
		elseif ClassName == "MeshPart" then
			obj = Instance.new("Part")
			MeshPartMesh = Instance.new("SpecialMesh")
			MeshPartMesh.MeshType = Enum.MeshType.FileMesh
			MeshPartMesh.Parent = obj
		else
			obj = Instance.new(ClassName)
		end
		local Parent = Instances[Parse(InstanceFMT)]
		local PropertiesLength = Parse(PropertyLengthFMT)
		local AttributesLength = Parse(PropertyLengthFMT)
		Instances[i] = obj
		for i = 1,PropertiesLength do
			local Prop,Value = Values[Parse(ValueFMT)],Values[Parse(ValueFMT)]
			
			-- ok this looks awful
			if MeshPartMesh then
				if Prop == "MeshId" then
					MeshPartMesh.MeshId = Value
					continue
				elseif Prop == "TextureID" then
					MeshPartMesh.TextureId = Value
					continue
				elseif Prop == "Size" then
					if not MeshPartScale then
						MeshPartScale = Value
					else
						MeshPartMesh.Scale = Value / MeshPartScale
					end
				elseif Prop == "MeshSize" then
					if not MeshPartScale then
						MeshPartScale = Value
						MeshPartMesh.Scale = obj.Size / Value
					else
						MeshPartMesh.Scale = MeshPartScale / Value
					end
					continue
				end
			end
			
			obj[Prop] = Value
		end
		if MeshPartMesh then
			if MeshPartMesh.MeshId=='' then
				if MeshPartMesh.TextureId=='' then
					MeshPartMesh.TextureId = 'rbxasset://textures/meshPartFallback.png'
				end
				MeshPartMesh.Scale = obj.Size
			end
		end
		for i = 1,AttributesLength do
			obj:SetAttribute(Values[Parse(ValueFMT)],Values[Parse(ValueFMT)])
		end
		if not Parent then
			table.insert(NoParent,obj)
		else
			obj.Parent = Parent
		end
	end
	
	local ConnectionsLength = Parse(ConnectionFMT)
	for i = 1,ConnectionsLength do
		local a,b,c = Parse(InstanceFMT),Parse(ValueFMT),Parse(InstanceFMT)
		Instances[a][Values[b]] = Instances[c]
	end
	
	return NoParent
end


local Objects = Decode('AEAKASEOVW5pb25PcGVyYXRpb24hBE5hbWUhBEd1bXMhCEFuY2hvcmVkIiEKQnJpY2tDb2xvcgdMASEGQ0ZyYW1lBBEA+QD6ACEFQ29sb3IGdQAAIQhNYXRlcmlhbAMAAAAAAACKQCELT3JpZW50YXRpb24KAAAAAAAAAAAAAHBBIQhQb3NpdGlvbgpA0VQ/ikbQQcsl'
..'rEIhCFJvdGF0aW9uIQRTaXplCiUCBkHNcX5A3FckQCEMVXNlUGFydENvbG9yIQRQYXJ0CokNhUCuK5JA/Ay0Pwo8ljNAtivAQdEqrEIKAAAAAAAANMMAAAAACkHTpECa78Y/PD50QAq0+kS/CRnbQQwmrEIKAAAAAAAANMOF60zCAwAAAAAAAAhACgAAgD8AAIA/AACA'
..'PwoAAAAAAAAAAAAAAAAKrvbmQAIpckBhcQhACjiiNT9NG9BBOCWsQgoAAAAAAAA0w9ejiMEKBRmrQPt5CEA+PnRAChCO3L6hC8hBiCGsQgoAAAAAAAA0w83MhMAKQVxuQL8KfkDaVyRACrTbkz9J9rVBdCOsQgoAAAAAAAA0wwAA8EIKd4fGQG6d7z/nF5NACmJa2r7K'
..'irRBJCqsQgoAAAAAAAA0w5qZCMIKP1xuQMIKfkDaVyRACrtUkUCQzb1BcyOsQgr81wFAw9aRQNpXJEAK4CLPv7vEuEF0I6xCCgAAAAAAADTDAADwwQoei5Y/xdaRQNpXJEAKL4s9P3TeukFzI6xCCgAAAAAAADTDAADwQQoaixZAw9aRQNpXJEAKDN54vn6qukFzI6xC'
..'Ckuirz/D1pFA2lckQAp02KFAy4HCQXIjrEIKdYfGQG2d7z/nF5NACspq0b4op+FBzSSsQgqIGAtBw9aRQNpXJEAKddFOPyrQ0EHOI6xCIQRIZWFkB14BBEEA+wD8AAaIPj4DAAAAAACAi0AKICA9Pwga00H1EaxCCgAANEMAAAAAAAA0QwqILwtBZ2Z8QOe3QEAKtiQd'
..'QABgsT/kuDRACogDiT9vGNZB8SisQgr3K6hAmvnKP8kzeUAKa8pRvwIY3UFJJ6xCCimn60CuE3dAlzYLQApsgjA/JeHRQXAmrEIKm9xgQDKfJUGxEUBACkZktT8xZsZBksasQgquR81BZuYjw4/CBkIKsWnIQLmLmEC2kt9ACn8+X0AQfslBIh+qQgquR83BzcyAQaSw'
..'KMMKAvinQG8OrUDQ8ZU/Cp2CBEAWUc1B5earQgowRlK/RyzdQfQmrEIKJ6frQK4Td0CXNgtACqUGMD9q9dFBGyasQgqb3GBANZ8lQbARQEAKtQ3AP6qYx0F8zapCCq5HzcFm5iNDj8IGQgq1achAuIuYQLiS30AKpWxzQJTnzUFo2atCCq5HzUHNzIDBpLAowwoG+KdA'
..'bQ6tQNDxlT8KRr0EQM1ozUGLOqxCCh7Bh0BxI5VA3LS3Pwq38jZA7AzAQbMqrEIKex5KvzWG20HWJaxCCiin60CvE3dAlzYLQApcLjg/WE/QQf0krEIKXJKuQF0/C0DJM3lACmJQ477GFchBOiGsQgo0M3NAmpmBQBauJ0AKRkqWP3CitUEwI6xCCl6PykDievQ/ehSW'
..'QAo+EeG+jy+0QQMqrEIKpSOUQHiivUEvI6xCCuR6BEDNzJRAFq4nQAqE6dO/eH+4QTAjrEIKmpmZP83MlEAWridACnFAQD8cpLpBLyOsQgqamRlAzcyUQBauJ0AKuj2BvhhvukEvI6xCCjQzsz/NzJRAFq4nQAo1/aRAJ2/CQS4jrEIKOPPXvmc24kGQJKxCCobrDUHN'
..'zJRAFq4nQAp/4FE/4gfRQYwjrEIhBEhvcm4HUwEEegD9AP4ABlYkJAMAAAAAAICJQAozM0/B9ij0QI9ClEIK0I1IQFqY4EGdXapCCsP1UMF7FO5AM7OXQgowFqs/CM3oP7w0Jj8KnhYRQMe61UDi2/c/Cs7ZVUA/bdFBu/aqQgozM09BuF4sw4XrfUEKKlCBQPLaREDE'
..'QZBACvS2kkBkpNdBbKapQgozM0/B9ij0QLjeFsMKHMJYQM9SX0Cjf0E/CrSCZ0Dc/dZBr8eqQgSHAP8AAAEKAAAAAAAAAAAAANJCCjCUCsBe1dhBQCasQgrbzB0/xrhWP3BMmT4KJdKFP60hRUBEnGQ/Ci2T0r8GEdNBdQysQgoAAAAAAAA0wwAAcMEKpYruP1ORtT/V'
..'DQVACuHwqb+ZTthBwsWrQgoAAAAAAAAAAAAA8MIKzOzHP/v6zT++eLI+Cu3/2L/vytVBvySsQgSSAP8AAAEKsCE3wJjp2UFAJqxCCrVKZT86AJw/L8DePgrZcsI/mziPQGEXpj8K6sEGwGSI0UHGAKxCCnxOLUDg6QNAlVVBQAq/eNK/xCXZQQqaq0IKKUARQGmmFUAK'
..'qgE/Ct1sC8B9ftVBECSsQgScAAEBAgEK7FHyQYXrqcBcD5BCCtCNSEBemOBBNvetQgozM/NBXI+SwIVrlUIKmxYRQMi61UDj2/c/CpryVECMvNNBntyrQgrsUfLBpLAuQ4/Cj0EKK1CBQPTaREDEQZBAClwNlUCiltpB1mqsQgrsUfJBheupwFL4GMMKHMJYQNFSX0Ch'
..'f0E/Cjo0ZkBTA9hBQMesQiEESXJpcweFAASrAAMBBAEG1XM9AwAAAAAAAHJACqDTjD/2kdZBJRysQgoAADRDAAAAAIXrIkMKiA2mPwByXT8vzzRACnzDlb8yA+BBHiWsQgrCwyU/SoHSQRkkrEIKJlIkQLolwD8uzzRACiJCij/6F9ZBJRysQiEJTWFpbiBIb3JuBLUA'
..'BQEGAQpxPRrASOE+QaTwM0MKqMWeQJbN3EFgxKlCCqRwHcBSuD5BzYwzwwrtVq9AT422P0uKGT8Ki7bnQCEOeEDCQZBACs73s0Bdb85BANSoQgoAAJhA4fokwwrXY8EK2S3ZQGbseEChf0E/CvWfmkAD+NJB2eypQgqaFhFAxbrVQOHb9z8K7V4kQM+azUHxtqpCCnE9'
..'GkDsESjDcT00QgTCAAcBCAEKFK4HwFK4kMEK1zLDCrjFnkCczdxBlPeuQgpSuA7A16OQwa6HM8MKduG5QPCTzkFT0q5CCtejkEAz8yRDH4V3wQphxZpA5vHSQYr6rkIKmRYRQMS61UDg2/c/Co5iLEBdMs1BImetQgoUrgdA9ughQylcL0IhBVB1cGlsB+sDBM4AAwEE'
..'AQYREREKQIFMP3pr1kElHKxCCvV1hj5CdCA/i143QAqRN5S/AdXfQawlrEIKndsoPxlT0kGnJKxCCsgqvD4M3p4/il43QAq11kw/+RfWQSUcrEIhBlNjZWxyYQf5AwTYAAMBBAEG/68ACiDcjD8YktZBJRysQgqVfKg/c9hfPz66K0AKMqWTv/a330EtJqxCClcAKj8O'
..'NtJBKCWsQgrUohBAvnYFQTE8aD8KYEeFP4AD1kF/gq5CCgAAAAAAAAAAAAA0wwMAAAAAAAAQQArM0iRAKbzAP7xcNUAKFWaKP/gX1kEZHKxCIQhOb3N0cmlscyENQm90dG9tU3VyZmFjZQMAAAAAAAAAAATmAAkBCgEKkOZHwODT0kHtWatCCqOKqT4buSU/+PSIPiEK'
..'VG9wU3VyZmFjZSELU3BlY2lhbE1lc2ghCE1lc2hUeXBlBOwACQEKAQqQ5kfA4NPSQYXzrEIhB0V5ZWxpZHME7wADAQQBCkBvdT8Q1NZBRSGsQgoxLfo/4mTFP6mFMUAKr36Vv2SU30EHJaxCCl1NJj98EtJBAiSsQgrC+xBAaiYJPzZUED8Knr6GP8K700FL7KlCCsL7'
..'EEABsAhANlQQPwpjbYc/DaPUQZ0kqkIK0pyGPxW700HPV65CCgHuhT9gotRBfR+uQgrSRnc/oISEPgQAMbYKoYSEvtRGdz/n/762CgAAgL9kHry2QhCCNQpxHry2AACAP+j/yLYKvSx4PuL6bz+0AIC+CgMmdr98bIg+MTCJPQp7hIS+10Z3P+x/ubYK10Z3v3uEhL7x'
..'fzQ2CgGYhj5pRFI/SpgBPwoIJna/UWyIPmMwiT0KnrZ0v/RZlr7+/zQ2CvRZlr6dtnQ/5P+2tgpEeXq/9G2COgqeUz4Kd+T8OwDGf7+SXik9CsdZc78xL6W81p2evgqK4fw7AMZ/vwdfKT0KAACAP4Bj5amADtSzCoC4nSkAAIA/AAAAMxABAEACgBYAFwAYABkAQALA'
..'AoEWABoAGwAcAB0AHgAfAAEWACAAIQAiAB0AHgAfAEACgRYAIwAkACUAHQAeAB8AQAiAFgAmACcAKACBFgApACoAKwAdAB4AHwCAFgAsAC0AGQCAFgAuAC8AMACAFgAxADIAMwCAFgA0ADUAGQCAFgA2ADcAGQBAAoEWADgAOQArAB0AHgAfAAEWADoAOwAZAB0AHgAf'
..'AAALAAIAAwAEAAUABgAHAAgACQAKAAsADAANAA4ADwAQABEAEgAPABMAFAAVAAUAAQBAAoEWAEQARQAZAB0AHgAfAEADQALAAoEWAEYARwAcAB0AHgAfAAEWAEgASQAiAB0AHgAfAEACgBYASgBLAEwAQAKBFgBNAE4ATwAdAB4AHwABFgBQAFEATwAdAB4AHwBAAsAC'
..'gRYARgBSABwAHQAeAB8AARYAUwBUACIAHQAeAB8AQAKAFgBVAFYAVwBAAoEWAFgAWQBaAB0AHgAfAAEWAFsAXABaAB0AHgAfAEACgBYAXQBeABkAQALAAoEWAEYAXwAcAB0AHgAfAAEWAGAAYQAiAB0AHgAfAEACgRYAYgBjACUAHQAeAB8AQAiAFgBkAGUAKACBFgBm'
..'AGcAKwAdAB4AHwCAFgBkAGgAGQCAFgBpAGoAMACAFgBrAGwAMwCAFgBtAG4AGQCAFgBvAHAAGQBAAoEWAGYAcQArAB0AHgAfAAEWAHIAcwAZAB0AHgAfAAALAAIAPAAEAAUABgA9AAgAPgAKAD8ADABAAA4AGQAQAEEAEgBCABMAQwAVAAUAAQBAAoAWAH0AfgB/AEAC'
..'gRYAgACBAIIAHQAeAB8AARYAgwCEAIIAHQAeAB8AAAsAAgB0AAQABQAGAHUACAB2AAoAdwAMAHgADgB5ABAAegASAHsAEwB8ABUABQABAEACgBYAiQCKAIsAQAKBFgCMAI0AjgAdAB4AHwABFgCPAJAAjgAdAB4AHwAACwACAHQABAAFAAYAdQAIAIUACgB3AAwAeAAO'
..'AIYAEACHABIAhgATAIgAFQAFAAEAQAKAFgCUAJUAiwBAAoEWAJYAlwCOAB0AHgAfAAEWAJgAmQCOAB0AHgAfAAALAAIAdAAEAAUABgB1AAgAkQAKAHcADAB4AA4AhgAQAJIAEgCGABMAkwAVAAUAAQBAAoAWAJ4AnwCgAEACgRYAoQCiAKMAHQAeAB8AARYApAClAKMA'
..'HQAeAB8AAAsAAgB0AAQABQAGAHUACACaAAoAdwAMAHgADgCbABAAnAASAJ0AEwB8ABUABQABAEACwAKBFgBmAK4AHAAdAB4AHwABFgByAK8AIgAdAB4AHwABFgCwALEAGQAdAB4AHwAACwACAKYABAAFAAYApwAIAKgACgCpAAwAqgAOACIAEACrABIArAATAK0AFQAF'
..'AAEAQAJAAoEWALgAuQC6AB0AHgAfAAEWALsAvAC0AB0AHgAfAIAWAL0AvgC/AAALAAIAsgAEAAUABgB1AAgAswAKAHcADAB4AA4AtAAQALUAEgC2ABMAtwAVAAUAAQBAAkACgRYAuADEAMUAHQAeAB8AARYAuwDGAMEAHQAeAB8AgBYAxwDIAMkAAAsAAgCyAAQABQAG'
..'AHUACADAAAoAdwAMAHgADgDBABAAwgASAMMAEwC3ABUABQABAEACwAKBFgBmANAAHAAdAB4AHwABFgByANEAIgAdAB4AHwABFgDSANMAGQAdAB4AHwAACwACAMoABAAFAAYAywAIAMwACgDNAAwAqgAOACIAEADOABIArAATAM8AFQAFAAEAQALAAoEWAGYA2gAcAB0A'
..'HgAfAAEWAHIA2wAiAB0AHgAfAEACgRYA3ADdAN4A3wAeAB8AARYA4ADhABkAHQAeAB8AAAsAAgDUAAQABQAGANUACADWAAoA1wAMAKoADgAiABAA2AASAKwAEwDZABUABQAWAAAKAAIA4gAEAAUA4wDkAAYA1QAIAOUACgDXAAwAqgAQAOYAEwDnAOgA5ADpAAwBAOoA'
..'HQAWAAAKAAIA4gAEAAUA4wDkAAYA1QAIAOsACgDXAAwAqgAQAOwAEwDnAOgA5ADpAA4BAOoAHQABAEACwAKBFgBmAPEAHAAdAB4AHwABFgByAPIAIgAdAB4AHwBAAkACARYA8wD0AB8AHQAeAB8AQAEBFgD1APYAHwAdAB4AHwBAAgEWAPMA9wAZAB0AHgAfAEABARYA'
..'9QD4ABkAHQAeAB8AAAsAAgDtAAQABQAGAD0ACADuAAoAPwAMAEAADgAiABAA7wASAKwAEwDwABUABQAA')
for _,obj in pairs(Objects) do
	obj.Parent = script or workspace
end
