-- Converted using Mokiros's Model to Script Version 3
-- Converted string size: 9176 characters

local ScriptFunctions = {
function(script,require)
local doorModel = script.Parent.Parent

local TweenService = game:GetService("TweenService")
local doorTweenInfo = TweenInfo.new(1, Enum.EasingStyle.Back, Enum.EasingDirection.Out,0,false,0)

local doorTween = TweenService:Create(doorModel.Door, doorTweenInfo, {CFrame = doorModel.DoorOpen.CFrame})
local TS = game:GetService("TweenService")

function OpenDoor()
    doorTween:Play()
end

script.Parent.Touched:Connect(function()
	script.Parent.CanTouch = false
	
	OpenDoor()
	doorModel.door_open:Play()
	script.Parent.Parent.Light.Hit:Play()
	script.Parent.Parent.Light.Color = Color3.new(1, 0.333333, 0)
	script.Parent.Parent.Light.Attachment.PointLight.Enabled = true
end)
end,
function(script,require)
local Brick = script.Parent

local function PlayerTouched(Part)
    local Parent = Part.Parent
    if game.Players:GetPlayerFromCharacter(Parent) then
        Brick.Transparency = 1
    end
end

Brick.Touched:connect(PlayerTouched)
end
}
local ScriptIndex = 0
local Scripts,ModuleScripts,ModuleCache = {},{},{}
local _require = require
function require(obj,...)
	local index = ModuleScripts[obj]
	if not index then
		local a,b = pcall(_require,obj,...)
		return not a and error(b,2) or b
	end
	
	local res = ModuleCache[index]
	if res then return res end
	res = ScriptFunctions[index](obj,require)
	if res==nil then error("Module code did not return exactly one value",2) end
	ModuleCache[index] = res
	return res
end
local function Script(obj,ismodule)
	ScriptIndex = ScriptIndex + 1
	local t = ismodule and ModuleScripts or Scripts
	t[obj] = ScriptIndex
end

function RunScripts()
	for script, index in pairs(Scripts) do
		coroutine.wrap(function()
			ScriptFunctions[index](script, require)
		end)()
	end
end


local function DecodeUnion(Values,Flags,Parse,data)
	local m = Instance.new("Folder")
	m.Name = "UnionCache ["..tostring(math.random(1,9999)).."]"
	m.Archivable = false
	m.Parent = game:GetService("ServerStorage")
	local Union,Subtract = {},{}
	if not data then
		data = Parse('B')
	end
	local ByteLength = (data % 4) + 1
	local Length = Parse('I'..ByteLength)
	local ValueFMT = ('I'..Flags[1])
	for i = 1,Length do
		local data = Parse('B')
		local part
		local isNegate = bit32.band(data,0b10000000) > 0
		local isUnion =  bit32.band(data,0b01000000) > 0
		if isUnion then
			part = DecodeUnion(Values,Flags,Parse,data)
		else
			local isMesh = data % 2 == 1
			local ClassName = Values[Parse(ValueFMT)]
			part = Instance.new(ClassName)
			part.Size = Values[Parse(ValueFMT)]
			part.Position = Values[Parse(ValueFMT)]
			part.Orientation = Values[Parse(ValueFMT)]
			if isMesh then
				local mesh = Instance.new("SpecialMesh")
				mesh.MeshType = Values[Parse(ValueFMT)]
				mesh.Scale = Values[Parse(ValueFMT)]
				mesh.Offset = Values[Parse(ValueFMT)]
				mesh.Parent = part
			end
		end
		part.Parent = m
		table.insert(isNegate and Subtract or Union,part)
	end
	local first = table.remove(Union,1)
	if #Union>0 then
		first = first:UnionAsync(Union)
	end
	if #Subtract>0 then
		first = first:SubtractAsync(Subtract)
	end
	m:Destroy()
	return first
end

local function Decode(str)
	local StringLength = #str
	
	-- Base64 decoding
	do
		local decoder = {}
		for b64code, char in pairs(('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='):split('')) do
			decoder[char:byte()] = b64code-1
		end
		local n = StringLength
		local t,k = table.create(math.floor(n/4)+1),1
		local padding = str:sub(-2) == '==' and 2 or str:sub(-1) == '=' and 1 or 0
		for i = 1, padding > 0 and n-4 or n, 4 do
			local a, b, c, d = str:byte(i,i+3)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000 + decoder[c]*0x40 + decoder[d]
			t[k] = string.char(bit32.extract(v,16,8),bit32.extract(v,8,8),bit32.extract(v,0,8))
			k = k + 1
		end
		if padding == 1 then
			local a, b, c = str:byte(n-3,n-1)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000 + decoder[c]*0x40
			t[k] = string.char(bit32.extract(v,16,8),bit32.extract(v,8,8))
		elseif padding == 2 then
			local a, b = str:byte(n-3,n-2)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000
			t[k] = string.char(bit32.extract(v,16,8))
		end
		str = table.concat(t)
	end
	
	local Position = 1
	local function Parse(fmt)
		local Values = {string.unpack(fmt,str,Position)}
		Position = table.remove(Values)
		return table.unpack(Values)
	end
	
	local Settings = Parse('B')
	local Flags = Parse('B')
	Flags = {
		--[[ValueIndexByteLength]] bit32.extract(Flags,6,2)+1,
		--[[InstanceIndexByteLength]] bit32.extract(Flags,4,2)+1,
		--[[ConnectionsIndexByteLength]] bit32.extract(Flags,2,2)+1,
		--[[MaxPropertiesLengthByteLength]] bit32.extract(Flags,0,2)+1,
		--[[Use Double instead of Float]] bit32.band(Settings,0b1) > 0
	}
	
	local ValueFMT = ('I'..Flags[1])
	local InstanceFMT = ('I'..Flags[2])
	local ConnectionFMT = ('I'..Flags[3])
	local PropertyLengthFMT = ('I'..Flags[4])
	
	local ValuesLength = Parse(ValueFMT)
	local Values = table.create(ValuesLength)
	local CFrameIndexes = {}
	
	local ValueDecoders = {
		--!!Start
		[1] = function(Modifier)
			return Parse('s'..Modifier)
		end,
		--!!Split
		[2] = function(Modifier)
			return Modifier ~= 0
		end,
		--!!Split
		[3] = function()
			return Parse('d')
		end,
		--!!Split
		[4] = function(_,Index)
			table.insert(CFrameIndexes,{Index,Parse(('I'..Flags[1]):rep(3))})
		end,
		--!!Split
		[5] = {CFrame.new,Flags[5] and 'dddddddddddd' or 'ffffffffffff'},
		--!!Split
		[6] = {Color3.fromRGB,'BBB'},
		--!!Split
		[7] = {BrickColor.new,'I2'},
		--!!Split
		[8] = function(Modifier)
			local len = Parse('I'..Modifier)
			local kpts = table.create(len)
			for i = 1,len do
				kpts[i] = ColorSequenceKeypoint.new(Parse('f'),Color3.fromRGB(Parse('BBB')))
			end
			return ColorSequence.new(kpts)
		end,
		--!!Split
		[9] = function(Modifier)
			local len = Parse('I'..Modifier)
			local kpts = table.create(len)
			for i = 1,len do
				kpts[i] = NumberSequenceKeypoint.new(Parse(Flags[5] and 'ddd' or 'fff'))
			end
			return NumberSequence.new(kpts)
		end,
		--!!Split
		[10] = {Vector3.new,Flags[5] and 'ddd' or 'fff'},
		--!!Split
		[11] = {Vector2.new,Flags[5] and 'dd' or 'ff'},
		--!!Split
		[12] = {UDim2.new,Flags[5] and 'di2di2' or 'fi2fi2'},
		--!!Split
		[13] = {Rect.new,Flags[5] and 'dddd' or 'ffff'},
		--!!Split
		[14] = function()
			local flags = Parse('B')
			local ids = {"Top","Bottom","Left","Right","Front","Back"}
			local t = {}
			for i = 0,5 do
				if bit32.extract(flags,i,1)==1 then
					table.insert(t,Enum.NormalId[ids[i+1]])
				end
			end
			return Axes.new(unpack(t))
		end,
		--!!Split
		[15] = function()
			local flags = Parse('B')
			local ids = {"Top","Bottom","Left","Right","Front","Back"}
			local t = {}
			for i = 0,5 do
				if bit32.extract(flags,i,1)==1 then
					table.insert(t,Enum.NormalId[ids[i+1]])
				end
			end
			return Faces.new(unpack(t))
		end,
		--!!Split
		[16] = {PhysicalProperties.new,Flags[5] and 'ddddd' or 'fffff'},
		--!!Split
		[17] = {NumberRange.new,Flags[5] and 'dd' or 'ff'},
		--!!Split
		[18] = {UDim.new,Flags[5] and 'di2' or 'fi2'},
		--!!Split
		[19] = function()
			return Ray.new(Vector3.new(Parse(Flags[5] and 'ddd' or 'fff')),Vector3.new(Parse(Flags[5] and 'ddd' or 'fff')))
		end
		--!!End
	}
	
	for i = 1,ValuesLength do
		local TypeAndModifier = Parse('B')
		local Type = bit32.band(TypeAndModifier,0b11111)
		local Modifier = (TypeAndModifier - Type) / 0b100000
		local Decoder = ValueDecoders[Type]
		if type(Decoder)=='function' then
			Values[i] = Decoder(Modifier,i)
		else
			Values[i] = Decoder[1](Parse(Decoder[2]))
		end
	end
	
	for i,t in pairs(CFrameIndexes) do
		Values[t[1]] = CFrame.fromMatrix(Values[t[2]],Values[t[3]],Values[t[4]])
	end
	
	local InstancesLength = Parse(InstanceFMT)
	local Instances = {}
	local NoParent = {}
	
	for i = 1,InstancesLength do
		local ClassName = Values[Parse(ValueFMT)]
		local obj
		local MeshPartMesh,MeshPartScale
		if ClassName == "UnionOperation" then
			obj = DecodeUnion(Values,Flags,Parse)
			obj.UsePartColor = true
		elseif ClassName:find("Script") then
			obj = Instance.new("Folder")
			Script(obj,ClassName=='ModuleScript')
		elseif ClassName == "MeshPart" then
			obj = Instance.new("Part")
			MeshPartMesh = Instance.new("SpecialMesh")
			MeshPartMesh.MeshType = Enum.MeshType.FileMesh
			MeshPartMesh.Parent = obj
		else
			obj = Instance.new(ClassName)
		end
		local Parent = Instances[Parse(InstanceFMT)]
		local PropertiesLength = Parse(PropertyLengthFMT)
		local AttributesLength = Parse(PropertyLengthFMT)
		Instances[i] = obj
		for i = 1,PropertiesLength do
			local Prop,Value = Values[Parse(ValueFMT)],Values[Parse(ValueFMT)]
			
			-- ok this looks awful
			if MeshPartMesh then
				if Prop == "MeshId" then
					MeshPartMesh.MeshId = Value
					continue
				elseif Prop == "TextureID" then
					MeshPartMesh.TextureId = Value
					continue
				elseif Prop == "Size" then
					if not MeshPartScale then
						MeshPartScale = Value
					else
						MeshPartMesh.Scale = Value / MeshPartScale
					end
				elseif Prop == "MeshSize" then
					if not MeshPartScale then
						MeshPartScale = Value
						MeshPartMesh.Scale = obj.Size / Value
					else
						MeshPartMesh.Scale = MeshPartScale / Value
					end
					continue
				end
			end
			
			obj[Prop] = Value
		end
		if MeshPartMesh then
			if MeshPartMesh.MeshId=='' then
				if MeshPartMesh.TextureId=='' then
					MeshPartMesh.TextureId = 'rbxasset://textures/meshPartFallback.png'
				end
				MeshPartMesh.Scale = obj.Size
			end
		end
		for i = 1,AttributesLength do
			obj:SetAttribute(Values[Parse(ValueFMT)],Values[Parse(ValueFMT)])
		end
		if not Parent then
			table.insert(NoParent,obj)
		else
			obj.Parent = Parent
		end
	end
	
	local ConnectionsLength = Parse(ConnectionFMT)
	for i = 1,ConnectionsLength do
		local a,b,c = Parse(InstanceFMT),Parse(ValueFMT),Parse(InstanceFMT)
		Instances[a][Values[b]] = Instances[c]
	end
	
	return NoParent
end


local Objects = Decode('AECjASEFTW9kZWwhBE5hbWUhGVdvcmtpbmcgUm9ibG94IERPT1JTIERvb3IhCldvcmxkUGl2b3QETgFPAVABIQRQYXJ0IQ1Cb3R0b21TdXJmYWNlAwAAAAAAAAAAIQpCcmlja0NvbG9yB2MBIQZDRnJhbWUEFABRAVIBIQVDb2xvcgZsWEshCE1hdGVyaWFsAwAAAAAA'
..'AIBAIQtPcmllbnRhdGlvbgoAAAAAAAA0wwAAAAAhCFBvc2l0aW9uCrzhG0ILQ4RABWCBwiEIUm90YXRpb24KAAA0QwAAAAAAADRDIQRTaXplCn7c2z4/PwRBDv5UPyEKVG9wU3VyZmFjZQQbAFMBVAEK4EkxQkREhEAcY4HCCj+nAT95QARBihxbPyEEV2VsZCECQzAE'
..'VQFWAVcBIQJDMQRYAVkBWgEhBVBhcnQwIQVQYXJ0MQQlAFsBXAEKrXQmQr64AkHwYoHCCjzInEAghD0+8u1TPwRdAV4BXwEEYAFhAWIBBGMBZAFlAQRmAWcBaAEELABpAWoBCjKgJkKYJv9A8aCBwgoAADTDAAAAAAAANEMKhICfQHAHjj7PaBE/BGsBbAFtAQRuAW8B'
..'cAEEcQFyAWUBBHMBdAF1AQR2AWUBdwEEeAF5AXoBBHsBfAF9ASEOVW5pb25PcGVyYXRpb24hCERvb3JPcGVuIQhBbmNob3JlZCIHJgAEPgB+AX8BBqBfNQoAAAAAAABwQgAAAAAKlIg1QpCYekAwSIbCCkWepkCSmPpAQdHwPiEMVHJhbnNwYXJlbmN5AwAAAAAAAPA/'
..'Cik/SUCoWlI+X+MxPgoJuDRCYYObP2KEhsIKCbg0QvxmpUBihIbCCuobUz46Cds/YOMxPgo2qDdCatzCQNQPicIKNqg3QoisCEDUD4nCCgm4NEJVM0VAYoSGwgq90DFCatzCQKIAhMIKvdAxQoisCECiAITCCgm4NELRH+FAYoSGwgpJnqZAkpj6QEPR8D4hCkhpdEJv'
..'eFBhcnQHJQAEVACAAYEBIQpDYW5Db2xsaWRlAgZLl0sKAAAAAAAANEMAAAAACjg9J0IIGJVAt9V0wgoAADTDAAAAAAAANMMK4KoiQdAWFUFxyc9AIQZTY3JpcHQhElR3ZWVuU2VydmljZVNjcmlwdASCAYMBZQEEhAGFAYYBBIcBhQGGASEFU291bmQhCWRvb3Jfb3Bl'
..'biENUGxheWJhY2tTcGVlZAMAAADgUbjuPyESUm9sbE9mZk1heERpc3RhbmNlAwAAAAAAQH9AIRJSb2xsT2ZmTWluRGlzdGFuY2UDAAAAAAAAEEAhB1NvdW5kSWQhFnJieGFzc2V0aWQ6Ly8zMjA5NDY3NDQhBlZvbHVtZQMAAACgmZnZPyEURXF1YWxpemVyU291bmRF'
..'ZmZlY3QhCEhpZ2hHYWluAwAAAAAAAAjAIQdMb3dHYWluIQdNaWRHYWluIRVEaXN0b3J0aW9uU291bmRFZmZlY3QhCE1lc2hQYXJ0IQREb29yB6gABHYAiAGJAQaBb2QhGEN1c3RvbVBoeXNpY2FsUHJvcGVydGllcxAAAAA/mpmZPgAAAAAAAIA/AACAPwoAAAAAzUwx'
..'QwAAAAAKPKcmQkgAgEBgZIHCCgAANMPNzCxAAAA0Qwp3XZ9AAAD4QI8F0D4hBk1lc2hJZCEXcmJ4YXNzZXRpZDovLzY1MDIzMzYxNjQhCE1lc2hTaXplCtCLA0IBAEhCkLUrQCEIQm9keUd5cm8hAUQDAAAAAAAATkAhCU1heFRvcnF1ZQoAAMhDAAAAAAAAyEMhAVAD'
..'AAAAAAAAWUAhA0hpdCEWcmJ4YXNzZXRpZDovLzUxMDkzNTMyNiEKQXR0YWNobWVudASJAIoBiwEKAAAAgAAAAIAAALTCCgAAIEAAAAAAAAAAACEPUGFydGljbGVFbWl0dGVyKAMAAAAA/9ax4WEqPpeAaQAAgD+XgGkhBERyYWcDAAAAAAAAFEAhEUVtaXNzaW9uRGly'
..'ZWN0aW9uIQdFbmFibGVkIQhMaWZldGltZRHNzEw/MzOzPyEOTGlnaHRJbmZsdWVuY2UhBFJhdGUDAAAAAAA4okApAgAAAAAAACRAAAAwPwAAgD8AAFxAAADAPiEFU3BlZWQRAABwQQAAcEEhC1NwcmVhZEFuZ2xlCwAASEIAAEhCIQdUZXh0dXJlIRdyYnhhc3NldGlk'
..'Oi8vMTk0NjkxNzUyNikEAAAAAAAAgD8AAAAAGrphOwAAAAAAAAAAbecLPs3MLD8zMxM+AACAPwAAgD8AAAAAIQdaT2Zmc2V0IQZVbmxvY2shFnJieGFzc2V0aWQ6Ly80MDQ0MTEwMzgDAAAAAAAA0D8hBEZhbGwDAAAAgD0K7z8hFnJieGFzc2V0aWQ6Ly8yNTc0MjIz'
..'MjIDAAAA4FG4zj8DAAAAAAAAAEADAAAAAAAAEMAhBUtub2NrAwAAAAAAQI9AAwAAAAAAAC5AIRdyYnhhc3NldGlkOi8vNTE4ODMxNDgwOAMAAABgZmbmPyEFTGV2ZWwDAAAAgML14D8hBUJyZWFrAwAAAKCZmek/IRdyYnhhc3NldGlkOi8vNDk4ODU4MDY0NiEIU2xh'
..'bU9wZW4hF3JieGFzc2V0aWQ6Ly85MTE0MTQ5MzIxAwAAAIDrUeg/IQtMaWdodEF0dGFjaAS3AIwBjQEKAAAAgAAANEMAAAAACgAAAD4AAAAAAAAwQSEJU3BvdExpZ2h0IQlIZWxwTGlnaHQhCkJyaWdodG5lc3MDAAAAAAAA4D8GjOr/IQVBbmdsZQMAAAAAAABSQCEE'
..'RmFjZSEFUmFuZ2UDAAAAAAAANUAhDEhlbHBQYXJ0aWNsZSEMQWNjZWxlcmF0aW9uCgAAAACamZk+AAAAACgCAAAAAHfo/wAAgD936P8DAAAAoJmZyT8RAAAAQAAAwEAhDUxpZ2h0RW1pc3Npb24hCFJvdFNwZWVkEQAAoMAAAKBAKQIAAAAAzcxMPs3MTD4AAIA/InKC'
..'PkOrQz4RAACAPwAAoEALAAA0QgAANEIhF3JieGFzc2V0aWQ6Ly8yNTgxMjIzMjUyKQkAAAAAAACAPwAAAAB9ekw+AACAPwAAAACafc4+7+WGPtffYj54Dgk/s/BlP2x60D0z+xw/OzqWPle6tj1EhzQ/s/BlP40+mz05RUs/l44lPyrdYj2U+Vs/kLxzP6nJIj0AAIA/'
..'AACAPwAAAAAhC0NGcmFtZVZhbHVlIRNPcmlnaW5hbENGcmFtZVZhbHVlIQVWYWx1ZQSOAY8BjQEhBFNpZ24HigAE2wCQAYkBIRBDb2xsaXNpb25Hcm91cElkBqGKfiEITWFzc2xlc3MKAAAAAI9CMkMAAAAAClB5JkIZKsFAYTiBwgoAADTDUrjePwAANEMKXOATQJhh'
..'mD/II6g+IRdyYnhhc3NldGlkOi8vNjcyNDE1MDI3OAqhfU1BSAzZQByEYUAEkQGSAY0BIQVQbGF0ZQdlAQTnAJMBlAEGlomEAwAAAAAAAJFACgAAAACFqzJDAAAAAArH9h5CL25eQAtzgcIhC1JlZmxlY3RhbmNlCgAANMNxPao/AAA0wwrTKLY+bDlnP+eEsj4hF3Ji'
..'eGFzc2V0aWQ6Ly82NTAyMzM2MjI4CoxcFkCO3L5ATVsTQATvAI8BjQEKAAAAAAAAtEIAAAAACgDg5zkAQQw9AACAuSEES25vYgTyAJUBlgEKWZAgQkWXYEBJboHCCgAANENxPao/AAA0wwpeYHw/YipzPuk0oj8hF3JieGFzc2V0aWQ6Ly82NTAyMzM2Mjc5CkJS0EDi'
..'t8g/RuQFQQT4AI8BjQEKaBLNPgCA/TkAAIC5BJcBmAGZAQSaAZsBnAEhClN1cmZhY2VHdWkhB0Fkb3JuZWUhCkNhbnZhc1NpemULAAA0QwAAoEIhClNpemluZ01vZGUhCVRleHRMYWJlbCEHU3RpbmtlciEMQXV0b0xvY2FsaXplIQtBbmNob3JQb2ludAsAAAA/AAAA'
..'PyEQQmFja2dyb3VuZENvbG9yMwb///8hFkJhY2tncm91bmRUcmFuc3BhcmVuY3kMAAAAPwAAAAAAPwAADDMzMz8AAAAAgD8AACEGWkluZGV4IQRGb250AwAAAAAAAEJAIQRUZXh0IQQwMDAxIQpUZXh0Q29sb3IzBnhnXiEKVGV4dFNjYWxlZCEIVGV4dFNpemUDAAAA'
..'AAAASEAhC1RleHRXcmFwcGVkIQZTaGFkb3cMAAAAAAEAAAAAAAAADAAAgD8AAAAAgD8AAAZPOiwhFlRleHRTdHJva2VUcmFuc3BhcmVuY3khEFRleHRUcmFuc3BhcmVuY3khCUhpZ2hsaWdodAwAAAAA//8AAAAAAAAG/9K8IRBUZXh0U3Ryb2tlQ29sb3IzAwAAAMDM'
..'zOw/IQlVSVBhZGRpbmchDVBhZGRpbmdCb3R0b20SAAAAAAUAIQtQYWRkaW5nTGVmdCEMUGFkZGluZ1JpZ2h0IQpQYWRkaW5nVG9wIQVMaWdodAfHAAQtAZ0BngEhCkNhc3RTaGFkb3cGY19iAwAAAAAAAJhACgAAtELsURjAAAAAAAqkjSZCJJYjQW66gMIDAAAAYGZm'
..'1j8KAAC0QgAAAADsURhACg/kUT/0UKc+D+RRPyEXcmJ4YXNzZXRpZDovLzYzMDk3OTkzNTIKtkEXQo2yDEK1QRdCBDQBiwGNAQoAAAAAx2ezPgAAAAAhClBvaW50TGlnaHQDAAAAAAAAKEAG/6deIQRCYXNlB2wBBD0BnwGgAQZERU4DAAAAAACAkEAKcJsmQiSWI0Fv'
..'YIHCChm5az8ClaQ+FrlrPyEXcmJ4YXNzZXRpZDovLzYzMDk3OTkzMDMKXN8pQtY1bUFa3ylCIQZSb3RhdGUHGgAERQGfAaABBiwtMwpEjSZCJJYjQfC1gMIKjmYOP62Xvj5QeKA+IRdyYnhhc3NldGlkOi8vNjMwOTc5OTQxMgqLPc1BLq7RQS4boUEDAAAAAAAACEAh'
..'F3JieGFzc2V0aWQ6Ly80NjAxNjM0MDE2IQVFcnJvciEWcmJ4YXNzZXRpZDovLzE2OTExMjMwOQShAaIBowEKkHYmQhCZekBoo4DCCgEAgL8AADiaAAAAAAoAADgaAACAPwAAIBsKAQCAv3BYQS0GwNg3Cp1BQa0AAIA/WpyNKwoBAIC/PDMyMGTB2DcKxjIysAAAgD+3'
..'v4QuCgCngT4AAAAAAAAAAAoAgMGtAAAQrAAAgD8KALBZGQAAgL8AAAAAClAeHcA4LYHAALiJOQreXgGzAAAHrgAAgD8Kng6drwAAgL/8//stCgEAgL9iGaMvqQDZNwo3QruvAACAP3p2Ai4KQMgcQAAAAAAAAIAzCgBEI7D8/3KuAACAPwo7VXUhAACAvwAAAAAKAG1G'
..'vnAugUAAm7g7CtxC/TL9//utAACAPwrM+ZAvAACAvwIA6q0KAAAAAACEvb0AAAAACgAAgD8IGSMwAEQjsAoAAAAAAAAAAAAAgD8KABYuPcA01T3kAPi9Cvz/fz96I6kvXJ2AswpcnYAz/v/XLfz/fz8KAQCAv0/3EK4AgNg3Cjr3EK4AAIA/WNhWLAoAAAAAYAcOvgAA'
..'AAAKAACAP0cggSJGAAAnCkYAAKeOIAGKAACAPwoAwIQ6MdR6QAAOPT0Ku///vnVMQa2Zs12/CpizXT/S/48ruf//vgoAAAC2YAcOvgAAAAAKAACAPzAA2J8AAAAACgDgJb0q1HpAOOnxPQr+/38/JvoQriUAADMKJQAAs/X/Vyz+/38/CoiAH0AAAAAAAAAAAAowANgf'
..'AACAvwAAAAAKAG5GvhrHdUBQxQE+Cj4MALPz/w8sAACAPwprTUGuAACAv/j/jywK9DZ4wCrUekAIHwTACvv//74m+hCu1rNdvwrWs10/9f9XLPv//74KE/3/PmIAkqiztF2/Cv2zNScAAIA/F3mbqAoCAIC/AFNBLAEAALEKA1NBLAAAgD/VHpAqCgAAAAB7FG7AAAAA'
..'AAoAAIA/QldBLACAQawKLrosQgQAAD+A7jNACgCAwatCV8ErAACAvwoAAIA/AAAQKgCAwasKxF0VwgQAAD+gSEhACj63f7/5q2amM/hAvQppRW6mAACAP3qwGyYKAAAAAAAAgL8AAAAACgAAgD8AAAAAAAAAAAoAAIC/AAAAAAAAAAAKAAAAAAAAgD8AAAAAChJQ5kMA'
..'AIBBADpJRQoAAAAAAAAAAAAAgL8KBuJ/v9ltaaYHCvm8CkDoLL2iUwLAALKyPQoj938/AAAAAPP/iDwKtO5/v0sAgCqq5L28CjQybyoAAIA/AHC3Jwq07n+/wd4DNdrkvbwK4dUDNQAAgD/PPkMyCgDXzD7ARQq9AACgNwoAAIA/vd4DtXb/v7MKvd4DNQAAgD/3yset'
..'Cpxhvb/wvCFAAGyRvQpK/n8/3N0DtcKp7DsKwd4DNQAAgD9nycetCkLHfz+Fc0AsXW4qPQpcbiq9N8HFqkLHfz8KPsd/P0ZzQCxnbio9CmduKr0FwcWqPsd/Pwrw8Jo+O1FJQEgUskAKQMd/v1puKj2VUcGsCsctwSwjOWyqAACAv0IBAAACAAIAAwAEAAUABgABCgAH'
..'AAgACQAKAAsADAANAA4ADwAQABEAEgATABQAFQAWABcAGAAZAAgABgABCgAHAAgACQAKAAsAGgANAA4ADwAQABEAEgATABsAFQAWABcAHAAZAAgAHQADAgAeAB8AIAAhAAYAAQoABwAIAAkACgALACQADQAOAA8AEAARABIAEwAlABUAFgAXACYAGQAIAB0ABQIAHgAn'
..'ACAAKAAdAAUCAB4AKQAgACoABgABCgAHAAgACQAKAAsAKwANAA4ADwAQABEAEgATACwAFQAtABcALgAZAAgAHQAIAgAeAC8AIAAwAB0ACAIAHgAxACAAMgAdAAgCAB4AMwAgADQAHQAIAgAeADEAIAA1ADYAQAmABgBCAEMAPQCABgBCAEQAPQCABgBFAEYAPQCABgBF'
..'AEcAPQCABgBCAEgAPQCABgBFAEkAPQCABgBFAEoAPQCABgBCAEsAPQAABgBMAD4APQABCwACADcAOAA5AAkAOgALADsADQA8AA8AEAARAD0AEwA+ABUAPQAXAD8AQABBAAYAAQ0AAgBNADgAOQAHAAgACQBOAAsATwBQAFEADQBSABEAUwATAFQAFQBVABcAVgAZAAgA'
..'QABBAFcADgEAAgBYAB0ADgIAHgBZACAAWgAdAA4CAB4AWQAgAFsAVwAOAABcAAEGAAIAXQBeAF8AYABhAGIAYwBkAGUAZgBnAGgAEwMAaQBqAGsACABsAAgAbQATAABuAAENAAIAbwA4ADkACQBwAAsAcQANAHIAcwB0AA8AEAARAHUAEwB2ABUAdwAXAHgAeQB6AHsA'
..'fAB9ABYDAH4AfwCAAIEAggCDAFwAFgQAAgCEAGAAYQBiAGMAZACFAG0AGAAAhgAWAwALAIcAEQCIABMAiQCKABYNAA0AiwCMAI0AjgCNAI8AUQCQAJEAkgBBAJMAlAAXAJUAlgCXAJgAmQCaAJsAQACcAJ0AQQBcABYFAAIAngBgAGEAYgBjAGQAnwBmAKAAbQAcAABo'
..'ABwDAGkAagBrAAgAbAAIAFwAFgYAAgChAF4AogBgAGEAYgBjAGQAowBmAKQAbQAfAABoAB8DAGkApQBrAKYAbAAIAFwAFgUAAgCnAGAAqABiAKkAZACqAGYAqwBtACIBAKwArQBcABYFAAIArgBeAK8AYACoAGIAqQBkALAAbQAkAQCsAK0AXAAWBQACALEAYACoAGIA'
..'qQBkALIAZgCgAG0AJgEArACzAIYAFgQAAgC0AAsAtQARALYAEwC3ALgAKAcAAgC5ALoAuwANALwAjwBRAL0AvgC/AKUAwADBAIoAKBEAAgDCAMMAxAANAMUAjADGAI4ApQCPAFEAkADHAMgAQQCSAMYAkwBjAMkAygAVAMoAFwDLAJYAzACYAM0AmgDOAEAAzwDQABYC'
..'AAIA0QDSANMAbgAWDgACANQACQDVAAsA1gBQAFEA1wBBAA0A2ADZADkADwAQABEA2gATANsAFQDcABcA3QB5AN4AewDfAB0ALAEAHgDgAG4AFg8AAgDhAAkA4gALAOMAUABRANcAQQANAOQA2QA5AA8A5QARAOYAEwDnAOgAxgAVAOkAFwDqAHkA6wB7AOwAhgAuAwAL'
..'AO0AEQDuABMA7wBuABYPAAIA8AAJAOIACwDxAFAAUQDXAEEADQDkANkAOQAPAOUAEQDmABMA8gDoAMYAFQDzABcA9AB5APUAewD2AIYAMAMACwD3ABEA7gATAPgAHQAwAQAeAPkAHQAwAQAeAPoA+wABBAACANQA/QD+AJIAQQD/AEEAAAE0DgACAAEBAgFRAAMBBAEF'
..'AQYBBwFBABMACAEXAAkBCgGlAAsBDAENAQ4BDwEQAREBOQASARMBFAE5AAABNQ8AAgAVAQIBUQAFAQYBBwFBABMAFgEXABcBCgEIAAsBDAENAQ4BDwEYAREBOQASARMBGQGrABoBZwAUATkAAAE1DwACABsBAgFRAAUBBgEHAUEAEwAcARcAFwELAQwBDQEOAQ8BHQER'
..'ATkAEgETAR4BBgEZAR8BGgFnABQBOQAgATQEACEBIgEjASIBJAEiASUBIgFuAAEPAAIAJgE4ADkACQAnAQsAKAEpAVEADQAqAQ8AKwERACwBEwAtAegALgEVAC8BFwAwAUAAxgB5ADEBewAyAYYAOQIACwAzARMANAE1AToEALoANgENADcBjwBRAMAAHwFuADkNAAIA'
..'OAE4ADkACQA5AQsAOgEpAVEADQA7AQ8APAERACwBEwA9ARUALwEXAD4BeQA/AXsAQAFuADkOAAIAQQE4ADkACQBCAQsAQwEpAVEADQBEAQ8A5QARACwBEwBFARUALwEXAEYBQABBAHkARwF7AEgBXAA5BgACAIQAXgCrAGAAYQBiAEkBZABKAWYAxgBtAD4AAFwAOQYA'
..'AgBLAV4AqwBgAGEAYgBjAGQATAFmAMYAbQBAAAAdADkBAB4ATQEXBCIAAwQjAAUGIgAFBiMAAgciAAUHIwAICSIACAoiAAgLIgAICyMAAgwiAAgMIwANECIADhEiAA4tIgAsLSMAFjIiADAyIwAuMyIAMDMjACw0/AAsQiIAOUIjAA4=')
for _,obj in pairs(Objects) do
	obj.Parent = script or workspace
end

RunScripts()
