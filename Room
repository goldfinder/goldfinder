-- Converted using Mokiros's Model to Script Version 3
-- Converted string size: 4620 characters

local ScriptFunctions = {
function(script,require)
-- See if I have a tool
local spawner = script.Parent
local tool = nil
local region = Region3.new(Vector3.new(spawner.Position.X - spawner.Size.X/2, spawner.Position.Y + spawner.Size.Y/2, spawner.Position.Z - spawner.Size.Z/2),
   Vector3.new(spawner.Position.X + spawner.Size.X/2, spawner.Position.Y + 4, spawner.Position.Z + spawner.Size.Z/2))
local parts = game.Workspace:FindPartsInRegion3(region)
for _, part in pairs(parts) do
	if part and part.Parent and part.Parent:IsA("Tool") then
		tool = part.Parent
		break
	end
end

local configTable = spawner.Configurations
local configs = {}
local function loadConfig(configName, defaultValue)
	if configTable:FindFirstChild(configName) then
		configs[configName] = configTable:FindFirstChild(configName).Value
	else
		configs[configName] = defaultValue
	end
end

loadConfig("SpawnCooldown", 3)

if tool then
	tool.Parent = game.ServerStorage
	
	while true do
		-- put tool on pad
		local toolCopy = tool:Clone()
		local handle = toolCopy:FindFirstChild("Handle")
		toolCopy.Parent = game.Workspace
		local toolOnPad = true
		local parentConnection
		parentConnection = toolCopy.AncestryChanged:connect(function()
			if handle then handle.Anchored = false end
			toolOnPad = false
			parentConnection:disconnect()
		end)
		if handle then
			handle.CFrame = (spawner.CFrame + Vector3.new(0,handle.Size.Z/2 + 1,0)) * CFrame.Angles(-math.pi/2,0,0)
			handle.Anchored = true
		end
		-- wait for tool to be removed
		while toolOnPad do 
			if handle then
				handle.CFrame = handle.CFrame * CFrame.Angles(0,0,math.pi/60)
			end
			wait() 
		end
		
		-- wait for cooldown
		wait(configs["SpawnCooldown"])		
	end
	
end



--if tool then
--	local handle = tool:FindFirstChild("Handle")
--	local toolCopy = tool:Clone()
--	toolCopy.Parent = game.ServerStorage
--	local toolOnPad = true	
--	
--	local parentConnection
--	parentConnection = tool.AncestryChanged:connect(function()
--		if handle then handle.Anchored = false end
--		toolOnPad = false
--		parentConnection:disconnect()
--	end)
--	
--	if handle then
--		handle.CFrame = (spawner.CFrame + Vector3.new(0,handle.Size.Z/2 + 1,0)) * CFrame.Angles(-math.pi/2,0,0)
--		handle.Anchored = true
--	end
--	
--	while true do
--		while toolOnPad do
--			if handle then
--				handle.CFrame = handle.CFrame * CFrame.Angles(0,0,math.pi/60)
--			end
--			wait()
--		end
--		wait(configs["SpawnCooldown"])
--		local newTool = toolCopy:Clone()
--		newTool.Parent = game.Workspace
--		handle = newTool:FindFirstChild("Handle")
--		toolOnPad = true
--	end
--end
end,
function(script,require)
--------------------- TEMPLATE ASSAULT RIFLE WEAPON ---------------------------
-- Waits for the child of the specified parent
local function WaitForChild(parent, childName)
	while not parent:FindFirstChild(childName) do parent.ChildAdded:wait() end
	return parent[childName]
end

----- MAGIC NUMBERS ABOUT THE TOOL -----
-- How much damage a bullet does
local Damage = 28
-- How many times per second the gun can fire
local FireRate = 1 / 6
-- The maximum distance the can can shoot, this value should never go above 1000
local Range = 700
-- In radians the minimum accuracy penalty
local MinSpread = 0.025
-- In radian the maximum accuracy penalty
local MaxSpread = 0.085
-- Number of bullets in a clip
local ClipSize = 30
-- DefaultValue for spare ammo
local SpareAmmo = 90
-- The amount the aim will increase or decrease by
-- decreases this number reduces the speed that recoil takes effect
local AimInaccuracyStepAmount = 1.15
-- Time it takes to reload weapon
local ReloadTime = 2.3
----------------------------------------

-- Colors
local FriendlyReticleColor = Color3.new(0, 1, 0)
local EnemyReticleColor	= Color3.new(1, 0, 0)
local NeutralReticleColor	= Color3.new(1, 1, 1)

local Spread = MinSpread
local AmmoInClip = ClipSize

local Tool = script.Parent
local Handle = WaitForChild(Tool, 'Handle')
local WeaponGui = nil
local Receiver = WaitForChild(Tool, 'Receiver')

local LeftButtonDown
local Reloading = false
local IsShooting = false

-- Player specific convenience variables
local MyPlayer = nil
local MyCharacter = nil
local MyHumanoid = nil
local MyTorso = nil
local MyMouse = nil
local  rot = {"100","200","300","400","500","-100","-200","-300","-400","-500"}
pi = {"1","1","1","1.05","0.95"}
local RecoilAnim
local RecoilTrack = nil

local IconURL = Tool.TextureId  -- URL to the weapon icon asset

local DebrisService = game:GetService('Debris')
local PlayersService = game:GetService('Players')


local FireSound

local OnFireConnection = nil
local OnReloadConnection = nil

local DecreasedAimLastShot = false
local LastSpreadUpdate = time()

-- this is a dummy object that holds the flash made when the gun is fired
local FlashHolder = nil


local WorldToCellFunction = Workspace.Terrain.WorldToCellPreferSolid
local GetCellFunction = Workspace.Terrain.GetCell

function RayIgnoreCheck(hit, pos)
	if hit then
		if hit.Transparency >= 1 or string.lower(hit.Name) == "water" or
				hit.Name == "Effect" or hit.Name == "Rocket" or hit.Name == "Bullet" or
				hit.Name == "Handle" or hit:IsDescendantOf(MyCharacter) then
			return true
		elseif hit:IsA('Terrain') and pos then
			local cellPos = WorldToCellFunction(Workspace.Terrain, pos)
			if cellPos then
				local cellMat = GetCellFunction(Workspace.Terrain, cellPos.x, cellPos.y, cellPos.z)
				if cellMat and cellMat == Enum.CellMaterial.Water then
					return true
				end
			end
		end
	end
	return false
end

-- @preconditions: vec should be a unit vector, and 0 < rayLength <= 1000
function RayCast(startPos, vec, rayLength)
	local hitObject, hitPos = game.Workspace:FindPartOnRay(Ray.new(startPos + (vec * .01), vec * rayLength), Handle)
	if hitObject and hitPos then
		local distance = rayLength - (hitPos - startPos).magnitude
		if RayIgnoreCheck(hitObject, hitPos) and distance > 0 then
			-- there is a chance here for potential infinite recursion
			return RayCast(hitPos, vec, distance)
		end
	end
	return hitObject, hitPos
end



function TagHumanoid(humanoid, player)
	-- Add more tags here to customize what tags are available.
	while humanoid:FindFirstChild('creator') do
		humanoid:FindFirstChild('creator'):Destroy()
	end 
	local creatorTag = Instance.new("ObjectValue")
	creatorTag.Value = player
	creatorTag.Name = "creator"
	creatorTag.Parent = humanoid
	DebrisService:AddItem(creatorTag, 1.5)

	local weaponIconTag = Instance.new("StringValue")
	weaponIconTag.Value = IconURL
	weaponIconTag.Name = "icon"
	weaponIconTag.Parent = creatorTag
end


local function CreateBullet(bulletPos)
	local bullet = Instance.new('Part', workspace)
	bullet.FormFactor = Enum.FormFactor.Custom
	bullet.Size = Vector3.new(0.175, 0.175, 0.175)
	bullet.Material = ("Metal")
	bullet.BrickColor = BrickColor.new("Really black")
	bullet.Shape = Enum.PartType.Block
	bullet.CanCollide = false
	bullet.CFrame = CFrame.new(bulletPos)
	bullet.Anchored = true
	bullet.TopSurface = Enum.SurfaceType.Smooth
	bullet.BottomSurface = Enum.SurfaceType.Smooth
	bullet.Name = 'Bullet'
	DebrisService:AddItem(bullet, 600)
	return bullet
end

local function Reload()
	if not Reloading then
		Reloading = true
		-- Don't reload if you are already full or have no extra ammo
		if AmmoInClip ~= ClipSize and SpareAmmo > 0 then
			if RecoilTrack then
				RecoilTrack:Stop()
			end
			if WeaponGui and WeaponGui:FindFirstChild('Crosshair') then
				if WeaponGui.Crosshair:FindFirstChild('ReloadingLabel') then
					WeaponGui.Crosshair.ReloadingLabel.Visible = true
				end
			end
			Receiver:FireServer("PlaySound", "Reload")
			wait(ReloadTime)
			-- Only use as much ammo as you have
			local ammoToUse = math.min(ClipSize - AmmoInClip, SpareAmmo)
			AmmoInClip = AmmoInClip + ammoToUse
			SpareAmmo = SpareAmmo - ammoToUse
			UpdateAmmo(AmmoInClip)
			WeaponGui.Reload.Visible = false
		end
		Reloading = false
	end
end

function OnFire()
	if IsShooting then return end
		if MyHumanoid and MyHumanoid.Health > 0 then
		if RecoilTrack and AmmoInClip > 0 then
			RecoilTrack:Play()
		end
		end
		IsShooting = true
		while LeftButtonDown and AmmoInClip > 0 and not Reloading do
			if Spread and not DecreasedAimLastShot then
				Spread = math.min(MaxSpread, Spread + AimInaccuracyStepAmount)
				UpdateCrosshair(Spread)
			end
			DecreasedAimLastShot = not DecreasedAimLastShot
			script.Parent.Flash.Image.Enabled = true
script.Parent.Flash.ImageTwo.Enabled = true
script.Parent.Flash.Image.Flash.Rotation = rot[math.random(1,#rot)]
script.Parent.Flash.ImageTwo.Flash.Rotation = rot[math.random(1,#rot)]
script.Parent.Flash.Embers.Enabled = true
			if Handle:FindFirstChild('FireSound') then
				Receiver:FireServer("PlaySound", "FireSound")
				Receiver:FireServer("Flash", true)
			end
			if MyMouse then
				local targetPoint = MyMouse.Hit.p
				local shootDirection = (targetPoint - Handle.Position).unit
				-- Adjust the shoot direction randomly off by a little bit to account for recoil
				shootDirection = CFrame.Angles((0.5 - math.random()) * 2 * Spread,
																(0.5 - math.random()) * 2 * Spread,
																(0.5 - math.random()) * 2 * Spread) * shootDirection
				local hitObject, bulletPos = RayCast(Handle.Position, shootDirection, Range)
				local bullet
				-- Create a bullet here
				if hitObject then
					bullet = CreateBullet(bulletPos)
				end
				if hitObject and hitObject.Parent then
					local hitHumanoid = hitObject.Parent:FindFirstChild("Humanoid")
					if hitHumanoid then
						local hitPlayer = game.Players:GetPlayerFromCharacter(hitHumanoid.Parent)
						if MyPlayer.Neutral or (hitPlayer and hitPlayer.TeamColor ~= MyPlayer.TeamColor) then
							TagHumanoid(hitHumanoid, MyPlayer)
							Receiver:FireServer("Damage", hitHumanoid, Damage)
							if bullet then
								bullet:Destroy()
								bullet = nil
								--bullet.Transparency = 1
							end
							Spawn(UpdateTargetHit)
						end
					end
				end
				
								if hitObject and hitObject.Parent then
					local hitD = hitObject.Parent:FindFirstChild("Egglon")
					if hitD then
						local hitPlayer = game.Players:GetPlayerFromCharacter(hitD.Parent)
						if true then
							TagHumanoid(hitD, MyPlayer)
							Receiver:FireServer("Damage", hitD, Damage)
							if bullet then
								bullet:Destroy()
								bullet = nil
								--bullet.Transparency = 1
							end
							Spawn(UpdateTargetHit)
						end
					end
								end
		
												
				AmmoInClip = AmmoInClip - 1
				UpdateAmmo(AmmoInClip)
			end
			wait(FireRate)
		end
		Receiver:FireServer("Flash", false)
		IsShooting = false
		wait(.05)
script.Parent.Flash.Image.Enabled = false
script.Parent.Flash.ImageTwo.Enabled = false
script.Parent.Flash.Embers.Enabled = false
		if AmmoInClip == 0 then
			Reload()
		end
		if RecoilTrack then
			RecoilTrack:Stop()
		end
	end

local TargetHits = 0
function UpdateTargetHit()
	TargetHits = TargetHits + 1
	if WeaponGui and WeaponGui:FindFirstChild('Crosshair') and WeaponGui.Crosshair:FindFirstChild('TargetHitImage') then
		WeaponGui.Crosshair.TargetHitImage.Visible = true
	end
	wait(0.25)
	TargetHits = TargetHits - 1
	if TargetHits == 0 and WeaponGui and WeaponGui:FindFirstChild('Crosshair') and WeaponGui.Crosshair:FindFirstChild('TargetHitImage') then
		WeaponGui.Crosshair.TargetHitImage.Visible = false
	end
end

function UpdateCrosshair(value, mouse)
	if WeaponGui then
		local absoluteY = 650
		WeaponGui.Crosshair:TweenSize(
			UDim2.new(0, value * absoluteY * 2 + 23, 0, value * absoluteY * 2 + 23),
			Enum.EasingDirection.Out,
			Enum.EasingStyle.Linear,
			0.33)
	end
end

function UpdateAmmo(value)
	if WeaponGui and WeaponGui:FindFirstChild('AmmoHud') and WeaponGui.AmmoHud:FindFirstChild('ClipAmmo') then
		WeaponGui.AmmoHud.ClipAmmo.Text = AmmoInClip
		if value > 0 and WeaponGui:FindFirstChild('Crosshair') and WeaponGui.Crosshair:FindFirstChild('ReloadingLabel') then
			WeaponGui.Crosshair.ReloadingLabel.Visible = false
		end
	end
	if WeaponGui and WeaponGui:FindFirstChild('AmmoHud') and WeaponGui.AmmoHud:FindFirstChild('TotalAmmo') then
		WeaponGui.AmmoHud.TotalAmmo.Text = SpareAmmo
	end
end


function OnMouseDown()
	LeftButtonDown = true
	OnFire()
end

function OnMouseUp()
	LeftButtonDown = false
end

function OnKeyDown(key)
	if string.lower(key) == 'r' then
		Reload()
	end
end


function OnEquipped(mouse)
	Receiver:FireServer("PlaySound", "EquipSound")
	RecoilAnim = WaitForChild(Tool, 'Recoil')
	FireSound  = WaitForChild(Handle, 'FireSound')

	MyCharacter = Tool.Parent
	MyPlayer = game:GetService('Players'):GetPlayerFromCharacter(MyCharacter)
	MyHumanoid = MyCharacter:FindFirstChild('Humanoid')
	MyTorso = MyCharacter:FindFirstChild('Torso')
	MyMouse = mouse
	WeaponGui = WaitForChild(Tool, 'WeaponHud'):Clone()
	if WeaponGui and MyPlayer then
		WeaponGui.Parent = MyPlayer.PlayerGui
		UpdateAmmo(AmmoInClip)
	end
	if RecoilAnim then
		RecoilTrack = MyHumanoid:LoadAnimation(RecoilAnim)
	end

	if MyMouse then
		-- Disable mouse icon
		MyMouse.Icon = "http://www.roblox.com/asset/?id=18662154"
		MyMouse.Button1Down:connect(OnMouseDown)
		MyMouse.Button1Up:connect(OnMouseUp)
		MyMouse.KeyDown:connect(OnKeyDown)
	end
end


-- Unequip logic here
function OnUnequipped()
	LeftButtonDown = false
	Reloading = false
	MyCharacter = nil
	MyHumanoid = nil
	MyTorso = nil
	MyPlayer = nil
	MyMouse = nil
	if OnFireConnection then
		OnFireConnection:disconnect()
	end
	if OnReloadConnection then
		OnReloadConnection:disconnect()
	end
	if FlashHolder then
		FlashHolder = nil
	end
	if WeaponGui then
		WeaponGui.Parent = nil
		WeaponGui = nil
	end
	if RecoilTrack then
		RecoilTrack:Stop()
	end
end

local function SetReticleColor(color)
	if WeaponGui and WeaponGui:FindFirstChild('Crosshair') then
		for _, line in pairs(WeaponGui.Crosshair:GetChildren()) do
			if line:IsA('Frame') then
				line.BorderColor3 = color
			end
		end
	end
end


Tool.Equipped:connect(OnEquipped)
Tool.Unequipped:connect(OnUnequipped)

while true do
	wait(0.033)
	if WeaponGui and WeaponGui:FindFirstChild('Crosshair') and MyMouse then
		WeaponGui.Crosshair.Position = UDim2.new(0, MyMouse.X, 0, MyMouse.Y)
		SetReticleColor(NeutralReticleColor)

		local target = MyMouse.Target
		if target and target.Parent then
			local player = PlayersService:GetPlayerFromCharacter(target.Parent)
			if player then
				if MyPlayer.Neutral or player.TeamColor ~= MyPlayer.TeamColor then
					SetReticleColor(EnemyReticleColor)
				else
					SetReticleColor(FriendlyReticleColor)
				end
			end
		end
	end
	if Spread and not IsShooting then
		local currTime = time()
		if currTime - LastSpreadUpdate > FireRate * 2 then
			LastSpreadUpdate = currTime
			Spread = math.max(MinSpread, Spread - AimInaccuracyStepAmount)
			UpdateCrosshair(Spread, MyMouse)
		end
	end
end
end,
function(script,require)
-- I like being simple.

local Tool = script.Parent
local Handle = Tool:WaitForChild("Handle")
local Receiver = Tool:WaitForChild("Receiver")
local Flash = Tool:WaitForChild("Flash")
local Spur = Flash:WaitForChild("Image")
local Smoke = Flash:WaitForChild("ImageTwo")

Receiver.OnServerEvent:connect(function (player, action, ...)
	local Data = {...}
	if action and Data then
		if action == "PlaySound" then
			if Handle:FindFirstChild(Data[1]) then
				Handle[Data[1]]:Play()
			end
		elseif action == "Flash" then
			Handle:WaitForChild("Flash").Enabled = Data[1]
			Flash:WaitForChild("Embers").Enabled = Data[1]
			Spur:WaitForChild("Flash").Rotation = math.random(0, 360)
			Smoke:WaitForChild("Flash").Rotation = math.random(0, 360)
			Spur.Enabled = Data[1]
			Smoke.Enabled = Data[2]
		elseif action == "Damage" then
			if Data[1]:IsA("Humanoid") and type(Data[2]) == "number" then
				Data[1]:TakeDamage(Data[2])
			end
		end
	end
end)
end,
function(script,require)
Tool = script.Parent;
local humanoid = nil
local arms = nil
local torso = nil
local welds = {}

function Equip(mouse)
	wait(0.01)
	humanoid = Tool.Parent:WaitForChild("Humanoid")
	if humanoid.RigType == Enum.HumanoidRigType.R15 then
		arms = {Tool.Parent:FindFirstChild("LeftUpperArm"), Tool.Parent:FindFirstChild("RightUpperArm"),Tool.Parent:FindFirstChild("LeftLowerArm")}
		torso = Tool.Parent:FindFirstChild("UpperTorso")
		if arms ~= nil and torso ~= nil then
			local sh = {arms[1]:FindFirstChild("LeftShoulder"), arms[2]:FindFirstChild("RightShoulder"),arms[3]:FindFirstChild("LeftElbow")}
			if sh ~= nil then
				local yes = true
				if yes then
					yes = false
					sh[1].Part1 = nil
					sh[2].Part1 = nil
					sh[3].Part1 = nil
					local weld1 = Instance.new("Weld")
					weld1.Part0 = torso
					weld1.Parent = torso
					weld1.Part1 = arms[1]
					weld1.C1 = CFrame.new(1, 0.2, 0.1) * CFrame.fromEulerAnglesXYZ(math.rad(-90), math.rad(50), 0)
					welds[1] = weld1
					local weld2 = Instance.new("Weld")
					weld2.Part0 = torso
					weld2.Parent = torso
					weld2.Part1 = arms[2]
					weld2.C1 = CFrame.new(-1, -0.2, 0.15) * CFrame.fromEulerAnglesXYZ(math.rad(-75), math.rad(-10), 0)
					welds[2] = weld2
					local weld3 = Instance.new("Weld")
					weld3.Part0 = torso
					weld3.Parent = torso
					weld3.Part1 = arms[3]
					weld3.C1 = CFrame.new(1.35, 0.8, 0.1) * CFrame.fromEulerAnglesXYZ(math.rad(-90), math.rad(60), 0)
					welds[3] = weld3
				end
			end
		end
	else
		arms = {Tool.Parent:FindFirstChild("Left Arm"), Tool.Parent:FindFirstChild("Right Arm")}
		torso = Tool.Parent:FindFirstChild("Torso")
		if arms ~= nil and torso ~= nil then
			local sh = {torso:FindFirstChild("Left Shoulder"), torso:FindFirstChild("Right Shoulder")}
			if sh ~= nil then
				local yes = true
				if yes then
					yes = false
					sh[1].Part1 = nil
					sh[2].Part1 = nil
					local weld1 = Instance.new("Weld")
					weld1.Part0 = torso
					weld1.Parent = torso
					weld1.Part1 = arms[1]
					weld1.C1 = CFrame.new(-0.249, 1, 1) * CFrame.fromEulerAnglesXYZ(math.rad(300), 0, math.rad(-90))
					welds[1] = weld1
					local weld2 = Instance.new("Weld")
					weld2.Part0 = torso
					weld2.Parent = torso
					weld2.Part1 = arms[2]
					weld2.C1 = CFrame.new(-1.15,.4, 0.35) * CFrame.fromEulerAnglesXYZ(math.rad(-90), math.rad(-15), 0)
					welds[2] = weld2
				end
			end
		end
	end
end

function Unequip(mouse)
	if humanoid.RigType == Enum.HumanoidRigType.R15 then
		if arms ~= nil and torso ~= nil then
			local sh = {arms[1]:FindFirstChild("LeftShoulder"), arms[2]:FindFirstChild("RightShoulder"),arms[3]:FindFirstChild("LeftElbow")}
			if sh ~= nil then
				local yes = true
				if yes then
					yes = false
					sh[1].Part1 = arms[1]
					sh[2].Part1 = arms[2]
					sh[3].Part1 = arms[3]
					welds[1]:Destroy()
					welds[2]:Destroy()
					welds[3]:Destroy()
				end
			end
		end
	else
		if arms ~= nil and torso ~= nil then
			local sh = {torso:FindFirstChild("Left Shoulder"), torso:FindFirstChild("Right Shoulder")}
				if sh ~= nil then
				local yes = true
				if yes then
					yes = false
					sh[1].Part1 = arms[1]
					sh[2].Part1 = arms[2]
					welds[1].Parent = nil
					welds[2].Parent = nil
				end
			end
		end
	end
end
Tool.Equipped:connect(Equip)
Tool.Unequipped:connect(Unequip)



end,
function(script,require)
local Tool = script.Parent
local Handle = script.Parent:WaitForChild("Handle")
function Equipped(Mouse)
	Player = script.Parent.Parent
	if Player:FindFirstChild("Holster") then
		Player.Holster:remove()
	end
end

function Unequipped(Mouse)
	if Player:FindFirstChild("Holster")==nil then
	local Holster = Handle:Clone()
local BackAttachment = Instance.new("Attachment")
BackAttachment.Axis = Vector3.new(0, -1, 1) --change to (0,-1,-1) if you want it on the torso's front
BackAttachment.Name = "WaistAttachment"
BackAttachment.Parent = Holster
Holster.Parent = Player
Holster.Name = "Holster"
local Torso = Player:FindFirstChild("UpperTorso") or Player:FindFirstChild("Torso")
	if Torso then
	local w=Instance.new("Motor")
		w.Part0=Holster
		w.Part1=Torso
		w.C0=BackAttachment.CFrame+Vector3.new(0.635,0,0)
		w.Parent=Holster
	end
end
end
Tool.Equipped:connect(Equipped)
Tool.Unequipped:connect(Unequipped)

if Player.Character.Humanoid.Health == 0 then
	Player.Holster:remove()
end
end
}
local ScriptIndex = 0
local Scripts,ModuleScripts,ModuleCache = {},{},{}
local _require = require
function require(obj,...)
	local index = ModuleScripts[obj]
	if not index then
		local a,b = pcall(_require,obj,...)
		return not a and error(b,2) or b
	end
	
	local res = ModuleCache[index]
	if res then return res end
	res = ScriptFunctions[index](obj,require)
	if res==nil then error("Module code did not return exactly one value",2) end
	ModuleCache[index] = res
	return res
end
local function Script(obj,ismodule)
	ScriptIndex = ScriptIndex + 1
	local t = ismodule and ModuleScripts or Scripts
	t[obj] = ScriptIndex
end

function RunScripts()
	for script, index in pairs(Scripts) do
		coroutine.wrap(function()
			ScriptFunctions[index](script, require)
		end)()
	end
end


local function DecodeUnion(Values,Flags,Parse,data)
	local m = Instance.new("Folder")
	m.Name = "UnionCache ["..tostring(math.random(1,9999)).."]"
	m.Archivable = false
	m.Parent = game:GetService("ServerStorage")
	local Union,Subtract = {},{}
	if not data then
		data = Parse('B')
	end
	local ByteLength = (data % 4) + 1
	local Length = Parse('I'..ByteLength)
	local ValueFMT = ('I'..Flags[1])
	for i = 1,Length do
		local data = Parse('B')
		local part
		local isNegate = bit32.band(data,0b10000000) > 0
		local isUnion =  bit32.band(data,0b01000000) > 0
		if isUnion then
			part = DecodeUnion(Values,Flags,Parse,data)
		else
			local isMesh = data % 2 == 1
			local ClassName = Values[Parse(ValueFMT)]
			part = Instance.new(ClassName)
			part.Size = Values[Parse(ValueFMT)]
			part.Position = Values[Parse(ValueFMT)]
			part.Orientation = Values[Parse(ValueFMT)]
			if isMesh then
				local mesh = Instance.new("SpecialMesh")
				mesh.MeshType = Values[Parse(ValueFMT)]
				mesh.Scale = Values[Parse(ValueFMT)]
				mesh.Offset = Values[Parse(ValueFMT)]
				mesh.Parent = part
			end
		end
		part.Parent = m
		table.insert(isNegate and Subtract or Union,part)
	end
	local first = table.remove(Union,1)
	if #Union>0 then
		first = first:UnionAsync(Union)
	end
	if #Subtract>0 then
		first = first:SubtractAsync(Subtract)
	end
	m:Destroy()
	return first
end

local function Decode(str)
	local StringLength = #str
	
	-- Base64 decoding
	do
		local decoder = {}
		for b64code, char in pairs(('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='):split('')) do
			decoder[char:byte()] = b64code-1
		end
		local n = StringLength
		local t,k = table.create(math.floor(n/4)+1),1
		local padding = str:sub(-2) == '==' and 2 or str:sub(-1) == '=' and 1 or 0
		for i = 1, padding > 0 and n-4 or n, 4 do
			local a, b, c, d = str:byte(i,i+3)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000 + decoder[c]*0x40 + decoder[d]
			t[k] = string.char(bit32.extract(v,16,8),bit32.extract(v,8,8),bit32.extract(v,0,8))
			k = k + 1
		end
		if padding == 1 then
			local a, b, c = str:byte(n-3,n-1)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000 + decoder[c]*0x40
			t[k] = string.char(bit32.extract(v,16,8),bit32.extract(v,8,8))
		elseif padding == 2 then
			local a, b = str:byte(n-3,n-2)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000
			t[k] = string.char(bit32.extract(v,16,8))
		end
		str = table.concat(t)
	end
	
	local Position = 1
	local function Parse(fmt)
		local Values = {string.unpack(fmt,str,Position)}
		Position = table.remove(Values)
		return table.unpack(Values)
	end
	
	local Settings = Parse('B')
	local Flags = Parse('B')
	Flags = {
		--[[ValueIndexByteLength]] bit32.extract(Flags,6,2)+1,
		--[[InstanceIndexByteLength]] bit32.extract(Flags,4,2)+1,
		--[[ConnectionsIndexByteLength]] bit32.extract(Flags,2,2)+1,
		--[[MaxPropertiesLengthByteLength]] bit32.extract(Flags,0,2)+1,
		--[[Use Double instead of Float]] bit32.band(Settings,0b1) > 0
	}
	
	local ValueFMT = ('I'..Flags[1])
	local InstanceFMT = ('I'..Flags[2])
	local ConnectionFMT = ('I'..Flags[3])
	local PropertyLengthFMT = ('I'..Flags[4])
	
	local ValuesLength = Parse(ValueFMT)
	local Values = table.create(ValuesLength)
	local CFrameIndexes = {}
	
	local ValueDecoders = {
		--!!Start
		[1] = function(Modifier)
			return Parse('s'..Modifier)
		end,
		--!!Split
		[2] = function(Modifier)
			return Modifier ~= 0
		end,
		--!!Split
		[3] = function()
			return Parse('d')
		end,
		--!!Split
		[4] = function(_,Index)
			table.insert(CFrameIndexes,{Index,Parse(('I'..Flags[1]):rep(3))})
		end,
		--!!Split
		[5] = {CFrame.new,Flags[5] and 'dddddddddddd' or 'ffffffffffff'},
		--!!Split
		[6] = {Color3.fromRGB,'BBB'},
		--!!Split
		[7] = {BrickColor.new,'I2'},
		--!!Split
		[8] = function(Modifier)
			local len = Parse('I'..Modifier)
			local kpts = table.create(len)
			for i = 1,len do
				kpts[i] = ColorSequenceKeypoint.new(Parse('f'),Color3.fromRGB(Parse('BBB')))
			end
			return ColorSequence.new(kpts)
		end,
		--!!Split
		[9] = function(Modifier)
			local len = Parse('I'..Modifier)
			local kpts = table.create(len)
			for i = 1,len do
				kpts[i] = NumberSequenceKeypoint.new(Parse(Flags[5] and 'ddd' or 'fff'))
			end
			return NumberSequence.new(kpts)
		end,
		--!!Split
		[10] = {Vector3.new,Flags[5] and 'ddd' or 'fff'},
		--!!Split
		[11] = {Vector2.new,Flags[5] and 'dd' or 'ff'},
		--!!Split
		[12] = {UDim2.new,Flags[5] and 'di2di2' or 'fi2fi2'},
		--!!Split
		[13] = {Rect.new,Flags[5] and 'dddd' or 'ffff'},
		--!!Split
		[14] = function()
			local flags = Parse('B')
			local ids = {"Top","Bottom","Left","Right","Front","Back"}
			local t = {}
			for i = 0,5 do
				if bit32.extract(flags,i,1)==1 then
					table.insert(t,Enum.NormalId[ids[i+1]])
				end
			end
			return Axes.new(unpack(t))
		end,
		--!!Split
		[15] = function()
			local flags = Parse('B')
			local ids = {"Top","Bottom","Left","Right","Front","Back"}
			local t = {}
			for i = 0,5 do
				if bit32.extract(flags,i,1)==1 then
					table.insert(t,Enum.NormalId[ids[i+1]])
				end
			end
			return Faces.new(unpack(t))
		end,
		--!!Split
		[16] = {PhysicalProperties.new,Flags[5] and 'ddddd' or 'fffff'},
		--!!Split
		[17] = {NumberRange.new,Flags[5] and 'dd' or 'ff'},
		--!!Split
		[18] = {UDim.new,Flags[5] and 'di2' or 'fi2'},
		--!!Split
		[19] = function()
			return Ray.new(Vector3.new(Parse(Flags[5] and 'ddd' or 'fff')),Vector3.new(Parse(Flags[5] and 'ddd' or 'fff')))
		end
		--!!End
	}
	
	for i = 1,ValuesLength do
		local TypeAndModifier = Parse('B')
		local Type = bit32.band(TypeAndModifier,0b11111)
		local Modifier = (TypeAndModifier - Type) / 0b100000
		local Decoder = ValueDecoders[Type]
		if type(Decoder)=='function' then
			Values[i] = Decoder(Modifier,i)
		else
			Values[i] = Decoder[1](Parse(Decoder[2]))
		end
	end
	
	for i,t in pairs(CFrameIndexes) do
		Values[t[1]] = CFrame.fromMatrix(Values[t[2]],Values[t[3]],Values[t[4]])
	end
	
	local InstancesLength = Parse(InstanceFMT)
	local Instances = {}
	local NoParent = {}
	
	for i = 1,InstancesLength do
		local ClassName = Values[Parse(ValueFMT)]
		local obj
		local MeshPartMesh,MeshPartScale
		if ClassName == "UnionOperation" then
			obj = DecodeUnion(Values,Flags,Parse)
			obj.UsePartColor = true
		elseif ClassName:find("Script") then
			obj = Instance.new("Folder")
			Script(obj,ClassName=='ModuleScript')
		elseif ClassName == "MeshPart" then
			obj = Instance.new("Part")
			MeshPartMesh = Instance.new("SpecialMesh")
			MeshPartMesh.MeshType = Enum.MeshType.FileMesh
			MeshPartMesh.Parent = obj
		else
			obj = Instance.new(ClassName)
		end
		local Parent = Instances[Parse(InstanceFMT)]
		local PropertiesLength = Parse(PropertyLengthFMT)
		local AttributesLength = Parse(PropertyLengthFMT)
		Instances[i] = obj
		for i = 1,PropertiesLength do
			local Prop,Value = Values[Parse(ValueFMT)],Values[Parse(ValueFMT)]
			
			-- ok this looks awful
			if MeshPartMesh then
				if Prop == "MeshId" then
					MeshPartMesh.MeshId = Value
					continue
				elseif Prop == "TextureID" then
					MeshPartMesh.TextureId = Value
					continue
				elseif Prop == "Size" then
					if not MeshPartScale then
						MeshPartScale = Value
					else
						MeshPartMesh.Scale = Value / MeshPartScale
					end
				elseif Prop == "MeshSize" then
					if not MeshPartScale then
						MeshPartScale = Value
						MeshPartMesh.Scale = obj.Size / Value
					else
						MeshPartMesh.Scale = MeshPartScale / Value
					end
					continue
				end
			end
			
			obj[Prop] = Value
		end
		if MeshPartMesh then
			if MeshPartMesh.MeshId=='' then
				if MeshPartMesh.TextureId=='' then
					MeshPartMesh.TextureId = 'rbxasset://textures/meshPartFallback.png'
				end
				MeshPartMesh.Scale = obj.Size
			end
		end
		for i = 1,AttributesLength do
			obj:SetAttribute(Values[Parse(ValueFMT)],Values[Parse(ValueFMT)])
		end
		if not Parent then
			table.insert(NoParent,obj)
		else
			obj.Parent = Parent
		end
	end
	
	local ConnectionsLength = Parse(ConnectionFMT)
	for i = 1,ConnectionsLength do
		local a,b,c = Parse(InstanceFMT),Parse(ValueFMT),Parse(InstanceFMT)
		Instances[a][Values[b]] = Instances[c]
	end
	
	return NoParent
end


local Objects = Decode('AADzIQVNb2RlbCEETmFtZSENQUstNDcgU3Bhd25lciEKV29ybGRQaXZvdATo6eohDlVuaW9uT3BlcmF0aW9uIRBFcXVpcG1lbnRTcGF3bmVyIQhBbmNob3JlZCIhCkJyaWNrQ29sb3IHZgAhBkNGcmFtZQQT6eohBUNvbG9yBm6ZyiEITWF0ZXJpYWwDAAAAAAAAkUAh'
..'CFBvc2l0aW9uCjBcTcIAAAA/YOyAQiEEU2l6ZQoBAIBABQCAPwAAgEAhDFVzZVBhcnRDb2xvciEEUGFydAoAAIBAAACAQAAAgEAKMFxNwgAAAEBg7IBCCgAAAAAAALRCAAC0wgMAAAAAAAAQQAoAAIA/AACAPwAAgD8KAAAAAAAAAAAAAAAACgAAgEAAAEBAAACAQAow'
..'XE3CAQAgQGDsgEIhClBvaW50TGlnaHQhCkJyaWdodG5lc3MDAAAAAAAAAEAGAKr/IQdTaGFkb3dzIQVSYW5nZQMAAAAAAAAkQCENQ29uZmlndXJhdGlvbiEOQ29uZmlndXJhdGlvbnMhCEludFZhbHVlIQ1TcGF3bkNvb2xkb3duIQVWYWx1ZSEGU2NyaXB0IQRUb29s'
..'IQVBSy00NyEMQ2FuQmVEcm9wcGVkAiEER3JpcAQ2ODohC0dyaXBGb3J3YXJkCpdIRL6cq9S9udd5vyEHR3JpcFBvcwowWJC8EOGuPMvTbD8hCUdyaXBSaWdodArrYnc/K2ZGvmc+Lb4hBkdyaXBVcAoUoy8+/Lx5P37JDL4hB1Rvb2xUaXAhA0FVRyELTG9jYWxTY3Jp'
..'cHQhBkNsaWVudCELUmVtb3RlRXZlbnQhCFJlY2VpdmVyIQVGbGFzaCENQm90dG9tU3VyZmFjZQMAAAAAAAAAAAdqAARK6+wG2oVBIQxGcm9udFN1cmZhY2UhC09yaWVudGF0aW9uCs3MDL/XI7BCXA8zQwqmLE3CuppbQIXxhUIhCFJvdGF0aW9uCjMzf8EAALBCAAAl'
..'wwrNzEw+zcxMPs3MTD4hClRvcFN1cmZhY2UhDFRyYW5zcGFyZW5jeQMAAAAAAADwPyELU3BlY2lhbE1lc2ghBVNjYWxlCgAAwD8AAMA/AADAPyEMQmlsbGJvYXJkR3VpIQVJbWFnZSEHRW5hYmxlZCEGQWN0aXZlDAAAwD8AAAAAwD8AACEKSW1hZ2VMYWJlbCEQQmFj'
..'a2dyb3VuZENvbG9yMwb///8hFkJhY2tncm91bmRUcmFuc3BhcmVuY3khDEJvcmRlckNvbG9yMyEPQm9yZGVyU2l6ZVBpeGVsDM3MzL0AAM3MzL0AAAyamZk/AACamZk/AAAhF3JieGFzc2V0aWQ6Ly8xMDY4MDkxMDg2IRFJbWFnZVRyYW5zcGFyZW5jeQMAAAAAAADQ'
..'PyEISW1hZ2VUd28MAABAQAAAAABAQAAADAAAAL8AAAAAAL8AAAwAAABAAAAAAABAAAAhD1BhcnRpY2xlRW1pdHRlciEGRW1iZXJzIQxBY2NlbGVyYXRpb24KAAAAAAAAgL8AAAAAKAIAAAAA/1QAAACAP/9UACERRW1pc3Npb25EaXJlY3Rpb24hCExpZmV0aW1lEc3M'
..'TD4AAIA/IQ1MaWdodEVtaXNzaW9uIQRSYXRlAwAAAAAAAFlAIQhSb3RTcGVlZBEAALTDAAC0QykCAAAAAAAAAD4AAAAAAACAPwAAAAAAAAAAIQVTcGVlZBEAAIBAAAAAQSELU3ByZWFkQW5nbGULAAC0QgAAtEIhB1RleHR1cmUhKWh0dHA6Ly93d3cucm9ibG94LmNv'
..'bS9hc3NldC8/aWQ9MzE1NTUzNzAxKQUAAAAAAAAAAAAAAADhRZc+AAAAAAAAAAAwuhw/pqqqPQAAAAAAAFg/JH3SPgAAAAAAAIA/AACAPwAAAAAhBFdlbGQhAkMwBO3u6iECQzEE7/DxIQVQYXJ0MCEFUGFydDEhBlNlcnZlciEIQXJtc0hvbGQhCE1lc2hQYXJ0IQZI'
..'YW5kbGUEivLzCgAAAAAAADTDAAAAAApgjE3CwJM+QCDMgEIKAAA0QwAAAAAAADTDCojInT4gT7o/CN2bQCEGTWVzaElkIRZyYnhhc3NldGlkOi8vNDc3MDA2NDk1IQhNZXNoU2l6ZQo+RQJBedIZQnOvAEMhCVRleHR1cmVJRCEWcmJ4YXNzZXRpZDovLzQ3NzAwNjUy'
..'NSEFU291bmQhCkVxdWlwU291bmQhElJvbGxPZmZNYXhEaXN0YW5jZQMAAAAAAAA0QCEHU291bmRJZCEXcmJ4YXNzZXRpZDovLzM3NDI5MjgwNTQhDFRpbWVQb3NpdGlvbgMAAAAAAAD4PyEGVm9sdW1lAwAAAAAAAOg/IQlGaXJlU291bmQhFnJieGFzc2V0aWQ6Ly8x'
..'Njg0MzY2NzEhBlJlbG9hZAMAAAAAAABJQCEEVGljayEdcmJ4YXNzZXQ6Ly9zb3VuZHMvL3N3aXRjaC53YXYG//9/AwAAAAAAADBAIQtCYWNrSG9sc3RlciEJQW5pbWF0aW9uIQZSZWNvaWwhC0FuaW1hdGlvbklkISdodHRwOi8vd3d3LnJvYmxveC5jb20vQXNzZXQ/'
..'SUQ9OTQzMzEwODYhCVNjcmVlbkd1aSEJV2VhcG9uSHVkIQVGcmFtZSEHQW1tb0h1ZAYAAAAM0oOHPvf+Xa95P8T/DAAAAACaAAAAAAAlACEFU3R5bGUhCVRleHRMYWJlbCEMRm9yd2FyZFNsYXNoDAMuND4AAOX3Hb8AAAxCWSU/AACfdQNAAAAhBFRleHQhAXwhClRl'
..'eHRDb2xvcjMhCFRleHRTaXplAwAAAAAAADhAIRBUZXh0U3Ryb2tlQ29sb3IzBn5+fiEWVGV4dFN0cm9rZVRyYW5zcGFyZW5jeSEIQ2xpcEFtbW8MUgVrPgAAspq4PQAADO9PIT4AAPZUXD8AACEDMTAwIQ5UZXh0WEFsaWdubWVudCEJVG90YWxBbW1vDGeyFD8AAO8K'
..'mj4AAAy4JLw+AACPwvU+AAAhAzE4MAwAAIA/9/4AAIA/iP8MAAAAAMgAAAAAADIAIQdWaXNpYmxlDAAAAD8AAAAAAD8AACEERm9udCEBIAb/AAAhCUNyb3NzaGFpcgYA/wAMAAAAAPQBAAAAAPQBDAAAAACWAAAAAACWACEIVG9wRnJhbWUMAAAAAP//AAAAv/n/DAAA'
..'AAACAAAAAAAOACEKUmlnaHRGcmFtZQwAAAA/+f8AAAAA//8MAAAAAA4AAAAAAAIAIQlMZWZ0RnJhbWUMAAAAv/n/AAAAAP//IQ5SZWxvYWRpbmdMYWJlbAwAAAAAFAAAAAAA7P8hAyAgIAMAAAAAAAAyQCEOVGV4dFlBbGlnbm1lbnQhC0JvdHRvbUZyYW1lDAAAAAD/'
..'/wAAAD/5/yEOVGFyZ2V0SGl0SW1hZ2UMAAAAAOf/AAAAAOf/DAAAAAAyAAAAAAAyACEpaHR0cDovL3d3dy5yb2Jsb3guY29tL2Fzc2V0Lz9pZD0xMTU0MDAyMTUhC0ltYWdlQ29sb3IzBqoAAAMAAAAAAADgPwowXE3CACftP0AKgUIKAACAPwAAAAAAAAAACgAAAAAA'
..'AIA/AAAAAAonRAq9DKmGPMjRfz8KLSgUPB30f7+7O4k8Cpi5Rj7QjES/iGsewAoAAIC/AAAAAAAAAAAKAD3dvUHCmz9A0pq+CsdECr0RKRQ8/dd/Pwr5qIY8HfR/vzRSHTwKAACAv2X/bjSZ/x41CmX/bjQAAIA/DEDssikBAAIAAgMEBQZAAgEXGBkaGxwdgBceHx0B'
..'CQACBwgJCgsMDQ4PEBESExQVFgkgAgQAISIOIyQJJSYnAgEAAigpBAIAAiorJiwCAAAtAQgAAi4vMDEyMzQ1Njc4OTo7PD0HAQACPj8HAQACQBcHDAACQUJDCkQMRQ5GRxtISRJKS0wUTU5DT1BRCgEAUlNUCgQAAlVWMFcJFFhZDAoAAkFXCVpbXFBdW15DEl8UYFVh'
..'YmNUCgQAAmRWMFcJFGVZDggAAkFXCVpbXFBdW15DEmYUZ2gKDwACaWprDmxtG1Ywbm9wUHFyc3RLdBR1dnd4eXp7T3x9CgIAfn+AgSwHAQAChCwHAQAChYYHCQAChwyISIkSikuLFIyNjo+QkZKTFAUAApSVlpeYmZqbnJMUAwACnZVyl56TFAQAAp+VoJeYm5yTFAQA'
..'AqGVlpeim5wgFAUAAkEhIg6jVjAlpCwHAQACpaYHAgACp6ipqgcBAAKrrBwGAAKtWq5eQxKvFLCxIrIdCgACs1xQXkMStBS1tre4W7m6u7y9Q7IdCwACvlxQXkMSvxTAtsG4W7m6u7y9Q8JQsh0LAALDXFBeQxLEFMW2xrhbubq7vL1DwkOsHAYAAp9cUF5DEscUyMkw'
..'siEKAAKfXFBeQxLKyTDLIrbMuM25ur1DrBwGAALOWs9cUF5DEtAU0awjBgAC0lpbXJxdrhLTFNSsIwYAAtVaW1ycXa4S1hTXrCMGAALYWltcnF2uEtkU17IjDAAC2lxQXkMS28kwyyK23Lhbud29Q8JD3iKsIwYAAt9aW1ycXa4S4BTUWSMKAALhXFBdrl5DEuIU48kw'
..'VeTl5mLnAhGCFBGDCg==')
for _,obj in pairs(Objects) do
	obj.Parent = script or workspace
end

RunScripts()
